Performance on 21.02.04 (start of day, 199 tiles and some groups)

"Loading window": 		375ms	346ms	317ms	321ms
"Loading settings": 	144ms	142ms	139ms	145ms
"Creating popupViewer": 8ms		6.8ms	6.6ms	7ms
"Attaching popupViewer": 289ms	302ms	281ms	286ms
"Query": 				146ms	119ms	113ms	121ms
"Normalize": 			5.6ms	6.3ms	6ms		6ms
"Shortcuts": 			0.78ms	1ms		1ms		1ms
"Rendering": 			574ms	523ms	543ms	552ms

"Create groups": 12ms
"Render tiles": 538ms


After making tiles body rendering async ("Render tiles" almost cuts in half):

"Attaching popupViewer": 325ms	296ms	285ms
"Rendering": 			304ms	295ms	311ms
"Create groups": 		9ms		7ms		13.8ms
"Render tiles":			293ms	286ms	294ms


If hiding PopupViewer (temporary test, not keeping that, of course)

"Attaching popupViewer": 288ms	292ms	284ms
"Rendering": 			276ms	293ms	287ms
"Create groups": 		5ms		7ms		13.8ms
"Render tiles":			268ms	285ms	279ms


Attaching TabsTabViewer's top _containerViewer to TabsTabViewer's body
at the end of the sync rendering (shaves another 60ms off "Render tiles",
not a lot, but visually helps a lot by avoiding the "No tabs" view
for about half a second):

"Attaching popupViewer": 276ms	286ms	277ms
"Rendering": 			245ms	234ms	242ms
"Create groups": 		6ms		6ms		7.7ms
"Render tiles":			237ms	226ms	232ms
"Attach tiles cont.":	6ms		6ms		7.9ms


After removing extra serialization delay by loading all chrome.storage
without waiting for window's "onLoad" (note that now "Query" starts before
"Attaching popupViewer", since it's not serialized after it anymore. The reason
why it takes so much longer now it's likely because "Attaching popupViewer"
inserts itserf to completion after the query start, and therefore we can
start processing the query only once "Attaching popupViewer" is done):

"Loading window": 		260ms	385ms	736ms	403ms
"Loading settings": 	116ms	176ms	233ms	215ms
"Loading localStore":	110ms	172ms	228ms	209ms
"Creating popupViewer": 6.5ms	7.8ms	7.1ms	10.1ms
"Query": 				343ms	351ms	293ms	376ms
"Attaching popupViewer": 316ms	305ms	265ms	324ms
"Normalize": 			7.2ms	6.8ms	5.1ms	6ms
"Shortcuts": 			0.78ms	0.86ms	0.7ms	0.8ms
"Rendering": 			306ms	322ms	273ms	344ms
"Create groups":		6.3ms	11.2ms	6ms		11.3ms
"Render tiles":			298ms	309ms	265ms	330ms
"Attach tiles cont.":	39ms	6.8ms	6.4ms	6ms


Fixed another serialization delay I had forgot:

"Loading window": 		358ms	302ms	314ms	396ms
"Loading settings": 	182ms	111ms	23ms	24ms
"Loading localStore":	175ms	106ms	20ms	20ms
"Creating popupViewer": 8.1ms	8.9ms	6.9ms	6.7ms
"Query": 				342ms	375ms	241ms	200ms
"Attaching popupViewer": 298ms	337ms	201ms	141ms
"Normalize": 			7ms		4.1ms	7ms		9.4ms
"Shortcuts": 			0.73ms	0.7ms	1.1ms	1.5ms
"Rendering": 			372ms	390ms	246ms	359ms
"Create groups":		11.8ms	9ms		9.9ms	17.6ms
"Render tiles":			358ms	378ms	233ms	338ms
"Attach tiles cont.":	5.8ms	9.4ms	6ms		6ms


Stop too much logging during tiles rendering

"Loading window": 		209ms	295ms	365ms	273ms
"Loading settings": 	65ms	108ms	109ms	115ms
"Loading localStore":	64ms	105ms	107ms	110ms
"Creating popupViewer": 4.4ms	7.3ms	7.6ms	6.9ms
"Query": 				96ms	141ms	149ms	137ms
"Attaching popupViewer": 70ms	106ms	107ms	106ms
"Normalize": 			3.4ms	4.3ms	4.1ms	3.9ms
"Shortcuts": 			0.5ms	0.8ms	0.9ms	1.3ms
"Rendering": 			232ms	230ms	271ms	256ms
"Create groups":		5.3ms	6.6ms	9.9ms	6.9ms
"Render tiles":			222ms	222ms	260ms	243ms
"Attach tiles cont.":	9.9ms	14.1ms	4.3ms	4.1ms


- Remove artificial settings initialized in popup.js before release

- Take out the whole FontAwesome and include only the icons we need, ideally
  without any CSS (to speed up window.onLoad performance)

- Disable Base._assert() for production code

- Document keyboard shortcuts

- Find out how to package for release


DONE

- BUG: search should not be case sensitive

- Add badge to extension icon counting the total number of tabs

- BUG: creating new tab doesn't flash "Home" tab

- BUG: search doesn't autoupdate if an extra result becomes available
  (but it autoupdates if a result disappears, tried with SOPhI, which went through JIRA login)

- Included Font Awesome 5.15.2 from cdnjs.com (not through their "kit")

- Add count of search results somewhere

- Centered correctly the caret of the dropdown-toggle

- Debounce re-render (updated RecurringJob and renamed ScheduledJob)
  * Update tile immediately if full re-rendering is delayed

- Clean up tile logic to re-render only what's necessary when the corresponding
  tab has an update (re-render the content, not the skeleton)
  * Mostly making sure the dropdown toggle doesn't get re-rendered for every
    update, because that would cause open menus to disappear at random

- BUG: search for all the uses of setHtml() or ${html} and replace them with
  setText() if they're using text coming from outside sources (which could lead
  to HTML injection attacks)

- BUG: closing a tab from the popup sometimes causes the corresponding window to move
  to the foreground
  * When clicking the "x" icon of a tab in the popup, we should not let the click get
    to the default "bring to front" action, we need to stop the click notification
	from getting there

- Action menu actions

- Add back ability to click on title in menu to jump to tab

- Use chrome.tabs.discard() to discard a tab from memory (still reloadable)
  * Added as an advanced option in the tile dropdown menu

- Shortcuts to support clipboard search like omnibar (setting option). Need to be an
  explicit option because URLs might have %s
  * Shortcuts use hostname or URL
  * Shortcuts “open in new tab” option, otherwise open in new tab only if hostname
    not present (if open in new tab, open in new tab only if full url not present,
	or search enabled)
  * When hostname based, pick the left-most tab in the smallest window ID (that should
    persist across reboots), and allow other tabs to take that position as menu option

- Started supporting search by tile badges, still not working

- BUG: don't use CTRL + left/right arrow, as it competes with the standard word/by/word
  moving around

- Rename the keyboard shortcut commands to have a numeric value in front, to allow
  for proper sorting in the extensions shortcuts page (they're sorted alphabetically)

- Added tab index to "tab extended ID" badge/search

- Added ability to inject scripts in tabs via ChromeUtils

- Added retrieval of <meta> tags from all tabs (if they're loaded)

- BUG: the open/close state of the tiles group accordion
    doesn't get saved across popup restarts (it used to work...)

- BUG: tab info normalization happens only on query, it doesn't happen for "tab"
  info coming from update listeners

- The "tabs" received on a full query need to be "live" and updated every
  time a listener fires with a new tab information
  * The new tab object from an update should replace the tab object in the tabs array
    - That way, when tile rendering sets searchBadges, the search logic can
	  find the right badges

- Include tile badge keywords in search
  * If a tab has the badge "highlighted", allow to find it when searching "highlighted"

- Done some performance testing and updated some logic to improve rendering performance
  * Made tile body rendering async, so it starts happening after the loop that
    generates all the tiles skeletons and inserts them in the container
  * Moved all chrome.storage initialization to the beginning of time, before
    the window.onLoad event is triggered. Before we were trying to be clean
	and putting storage in the objects that need to use it, but that was adding
	extra serialization delays by having some data loaded first, dependency,
	then more data loaded later, other dependency
  * Attaching TabsTabViewer's top _containerViewer to TabsTabViewer's body
    at the end of the synchronous part of the tile rendering (attaching tiles
	while the container is not in the DOM speeds up rendering slightly)
  * Removed some unnecessary verbose logs from _getTabMetaTags()

- BUG: "home" tab only displays data if switching to another tab first...
  * Race condition discovered as a result of the performance improvements done today

- Added support for onAttached and onMoved events, to track tabs moving around,
  since that's affecting the candidate tab for custom shortcuts

- BUG: search doesn't auto-update when you add a new tab that matches
  * Repurposed "prop" notifications to fix this

- BUG: each "prop" notifications is generated multiple times if multiple "props" match,
  one per matching "prop"

- Change .createNew() back to .create()

- Implement shortcut actions ("set me as candidate tab for shortcut SCx")

- Show candidate tabs for shortcuts with grayed out badges, so you can search
  for all candidates by typing the shortcut "SCx" in the search box

- Changed PersistentDict to use "_id" as "_keyInStorage" (makes log messages a lot
  more readable)

- Implement "live sync" of chrome.storage.sync for SettingsStore
  * This is urgent now, otherwise when the user changes the shortcuts configuration
    in the popup, the background.js (which needs to operate the shortcut) won't be
	informed about the change

- BUG: tabs.js in the background page needs to call updateTabs() for the
  shortcutManager, to remain in sync with what the popup is displaying

- BUG: cleanup _queryTabsCount() and move settingsStore.getShortcutsManager().updateTabs(tabs);
  to a proper place (including getting continuous updates as all the tabs change,
  currently TabsManager is not listening to all tabs changes...

- Started decoupling background.js from the web monitoring files
  - Incomplete, more cleanup to do

- Added to Settings the tiles modifiers (advanced menu, show extended ID)

- Added to Settings customization of the search engine for the "clipboard launch/search" shortcut

- Added to Settings customization of the custom shortcuts

- Add link to keyboard shortcuts in settings
  * But it broke the next day with a Chrome update, not possible anymore

- Added to Settings information about whether Incognito access is granted or not

- Implemented EventManager based on DOM events

- BUG: tile menu gets rendered with tile skeleton, not with tile body (it
  doesn't get updated as users change Settings)

- Change group builder parser to concatenate regex with “or” operator

- Manage group settings

- Added production flag (visible in Settings menu)

- Added accordion for custom group and shortcut settings

- Use gray background for incognito tiles, and reversed color of menu and close icons

- Changed model for adding new custom groups, so that a full card is created
  immediately
  * It required supporting cards with no group name (a valid group name was
    required in the cards before this change)

- BUG: remove "No custom groups defined" message from custom groups inner
  container if we can't find an easy way to let it be in sync
  * The problem is that the container counts the number of .append() calls
    made, but nobody calls the container to update it when it calls .detach()
	on itself. To make things worse, one can simply work with the DOM regardless
	of the container, and it's impossible to keep it in sync...
	The only time that "Empty" message is accurate is before the first .append()...
	that's good enough for the tiles view (given the continuous full re-query/re-render
	cycles), but doesn't work for something more dynamic like the custom group cards
  * Fixed by forcing calls to clear() in the container when it's supposed to be empty

- Automatically give focus to the group name input when creating a new card

- Completed syncing of color info from custom group settings

- Disabled color radios when a custom group has no name

- Allow users to specify custom groups hostnames as regular text, not
  standard regex

- Publish on github 

- Add copyright header to files
  * Per github convention, added info only in LICENSE file

- BUG: accordion tiles don't remain open anymore

- BUG: TabsTabViewer enter search mode when typing in an <input> of SettingsTabViewer.
  This should not happen, what happens in SettingsTabViewer stays in SettingsTabViewer.

- BUG: GroupsBuilder was triggering an update even when the changed key was not "customGroups"

- Reduced number of unnecessary settings refreshes. Each settings viewer now listens only
  to changes for a specific event "key"

- If you reload a window that's in search results based on search
  badges (e.g., search for "sc2", the shortcut), all tabs disappear from the
  search results, because we trigger a full re-query/re-render and therefore
  no tabs have the search badges when the re-render starts
  * We definitely need to move the prep for the search badges to the normalization
    stage. That would easily solve this problem. We'll need to address the challenge
    we had that during normalization some of the things we need in the badges won't
    be knowable (custom shortcuts?), but the normalization step is currently very fast
    (less than 5ms with 199 tabs per the latest performance measurements), so we can
    afford to spend a few extra cycles to update those (and the shortcuts info gets
    built very fast, less than 1ms).

- Include special attributes that don't have a badge in search badges
  * E.g. "unloaded" is visualized with visual clues other than a badge, but we should
    be able to find it by typing "unloaded"
  * Possible candidates: "unloaded", "unpinned"
  * Fix note: unfortunately "loaded" is a substring of "unloaded", so now when we search
    for "loaded" it matches both "loaded" and "unloaded", making it impossible to search
	only for "loaded" things...

- Added more search badges, switched to use "active" instead of "highlighted", and translated
  the hidden status "complete" to "loaded" for UX-friendly symmetry with "unloaded"

- BUG: unfortunately "loaded" is a substring of "unloaded", so now when we search
  for "loaded" it matches both "loaded" and "unloaded", making it impossible to search
  only for "loaded" things...
  * Implemented special characters at the beginning of the search string:
    - "^": regex-like syntax to indicate "search strings starting with",
	- "!": negation, indicating to match tabs that don't contain the search string
	- "!^": negation of regex-like syntax, that is, "search strings not starting with"
    - E.g. "^loaded" matches only "loaded" and not "unloaded" hidden badges

- Added tmStats() to be called directly from the Chrome devtools console of the popup

- BUG: "active" badge doesn't get removed from tab in search result when a different
  tab becomes active

- Added icons for audible and muted

- Added "mute/unmute" menu item

- Cleaned up use of Font Awesome icons

- Removed the logic that tried to avoid unnecessary re-query/re-render cycles, as it was
  too brittle due to the issues with the lack of info in the Chrome tab events
  * Now full refreshes occur for every event, with a little 200ms debouncing, and
    we should be done with things not updating in search mode

- Remove "https://" from URL displayed in tiles (but only "https://", leave any
  other protocol visible, matching what Chrome does in the omnibar)

- Added "highlight / remove-highlight" menu item
  * Decided to avoid calling it "select/unselect" because we want to support tiles
    selection later, and that's a different thing

- Don't try to render space for favicon if a favicon is not available

- Include custom group names (non-hostname) in search badges, and possibly in badges
  too while in search mode (while not in search mode there's no reason to do that
  since all tiles are grouped under the group name)

- Color badges from custom groups (not very useful when inside the groups, but possibly
  useful when the tile is in a search result)

- Workaround for Chrome bug: chrome.window.onFocusChange doesn't fire when switching from
  a Chrome window to the window of another application
  * Need to fix it for the "back" command to work properly when switching back from another
    app to the last opened Chrome tab

- BUG: "back" needs to support the "global" case, and in that case just bring up
  the Chrome window and stay on the same tab (like it happens when "back" from a
  "-1" window)
  * It worked out of the box after the workaround for the Chrome bug...

- BUG: when creating a new custom group, the tabs re-query re-render doesn't
  seem to get triggered automatically

- BUG: custom group container tile doesn't update color callout when color changed
  * The tiles inside the container do change color...

- Explicitly show badge for custom group (colored?)

- BUG: Custom groups with pinned tabs don't get pushed to the top, they
  follow standard sorting
  * Hostname-based groups get pushed to the top instead

- BUG: Since 2021.02.05, access to "chrome://" URLs seems to be prevented from
  within the popup, and the links in Settings are dead
  * The error message in the console is "Not allowed to load local resource"
  * https://chromereleases.googleblog.com/
  * https://www.theverge.com/2021/2/5/22267872/chrome-88-zero-day-vulnerability-government-backed-hackers-security-researchers

- Added thumbtack icon and removed badge for "pinned"

- Remove visible badge for "discarded" (it's just confusing, too similar to "unloaded")

- Made pinning configurable for custom groups

- Increased vertical size of container tiles, to be closer to the size of tab tiles

- Added thumbtack to container tiles
  * Black if the group is pinned, gray if one of the tiles inside is pinned
  * No need to worry about Incognito color inversion, custom group accordion
    headers are never dark, even if they only contain incognito tabs
  * Restructured TabsTabViewer.js (extracted class TilesGroupViewer) in preparation
    for supporting more decorations of the container tiles

- Improved rendering of badges when some badges are too long (the name of the custom
  groups have no length limits, and they show up in badges)

- Figured out how to center the "x" button to close tiles and delete custom groups

- Changed Github repository name to TabMania and updated local repo to https://github.com/marcodb26/TabMania.git
  * git remote set-url origin https://github.com/marcodb26/TabMania.git

- BUG: uninitialized "options" PersistentDict leads to showing extTabId badge (it shouldn't)

PUNTED TO NEXT RELEASE

- Find a good way to manage console.log() in inject files (leveraging lib/prod.js)
  * Then add lib/prod.js to the "npm run inject" script

- Given the trouble we've been having chasing the popup console when the popup itself
  closes (e.g. when trying to trigger opening a tab from the popup), should we force
  all this._log() calls to go to the background console instead?
  * See multiLog() at popup.js to see how to do it
  * We'll need to understand the performance penalty of choosing to go always and only
    to the console of the background page instead of going to the console of the popup,
	but if we can, avoiding to have to always reopen the console every time you reopen
	the popup would be a great benefit...
	- Maybe only in DEV mode and not in prod mode?

- Find a way to support autocomplete for the search input
  * https://stackoverflow.com/questions/15462991/trigger-autocomplete-without-submitting-a-form
    - The HTML5 <input autocomplete="On"> only works if you
	  * Give a fixed ID to the input field (we might need changes to make that happen)
	  * Force a real form submission
  * Alternatively, find a library to do something custom with it...

- "Clipboard launch/search" assumes there's something in the clipboard, should we
  have an alternate shortcut that simply opens a new empty tab?
  * If you have Chrome opened, that's very trivial to do natively, but the shortcut
    could save you a tiny bit of time if you're in another application...

- Manage incognito tabs (same view, different BS-tab, hide, etc)

- BUG: if a group has a long name and it's pinned, it's thumbtack is slighty off
  to the right compared to the other pinned groups/tiles around it

- Remember recent searches

- Add action menu to containers

- Display <meta> tag information in dropdown, under title
  * Only "description"? Or also "image" when available?

- Include also bookmarks in the search results, not only open tabs
  * https://developer.chrome.com/docs/extensions/reference/bookmarks/#method-search
  * If a bookmark is in a tab, it should not show up twice
  * Should also add a badge mentioning a tab is bookmarked?

- BUG: the popup icon badge shows the wrong count when entering search mode, it
  seems to be getting updated to the number of tabs in the search results...

- Show current tab in current window at the top of the tabs list?

- "Candidate tabs" behavior should apply also for hostnames and URLs not in "search mode"
  ("useClipboard")

- Add support for wildcards in "matchList" of custom groups

- Sort/group tabs by other means (by window, etc.)

- Display details about video
  * For Zoom video playback, you can use:
	"-webkit-media-controls-timeline"
	<input type="range" step="any" pseudo="-webkit-media-controls-timeline" max="2733.408" aria-label="video time scrubber 0:00 / 45:33" aria-valuetext="elapsed time: 0:00">
  * Or:
    <input type="button" pseudo="-webkit-media-controls-play-button" aria-label="play" class="pause" style="">
	<div aria-label="elapsed time: 0:00" pseudo="-webkit-media-controls-current-time-display" style="">0:00</div>
	(though the time seems to be stuck at "0:00")

  * Actually this has all the data (updated in real time):	
	<div class="vjs-control-bar" dir="ltr">
	  <div class="vjs-progress-control vjs-control">
	    <div tabindex="0" class="vjs-progress-holder vjs-slider vjs-slider-horizontal" role="slider" aria-valuenow="NaN" aria-valuemin="0" aria-valuemax="100" aria-label="Progress Bar" aria-valuetext="04:40 of 45:33">
		[...]
		  <div class="vjs-time-tooltip" aria-hidden="true" style="right: -23.0156px;">14:45</div>
		  <div class="vjs-time-tooltip" aria-hidden="true">04:38</div>

  * For Youtube can use:
    <div class="ytp-time-display notranslate" style="">
	  <span class="ytp-time-current">0:22</span>
	  <span class="ytp-time-separator"> / </span>
	  <span class="ytp-time-duration">2:00:21</span>

- Add logic to let "www.google.com" be recognized as a valid URL, even though new URL()
  won't consider it valid
  * Make it behave like the browser's omnibar...

- Fix the domElem.addEventListener(event, fn, true), sometimes we say "true", sometimes
  we say "false", can we do it more accurately than random?

- Reorganize TabsTabViewer to leverage a separate "TabsSet" object to manage the querying
  and maintenance of tabs subsets (instead of spreading that logic within the class code
  * One such object for the standard view, one for the search view, in future possibly
    one separate object for the incognito view (which needs to behave like standard view,
	but on a different subset of tabs)

- BUG: sometimes some websites blink the title continouosly between two
  different titles, e.g.:
  https://www.snowflake.com/data-warehousing-difference-sql-nosql/
  switching between normal title and "(1) new message" because of the
  "bear" with the chat with a pending advertisement
  - How do we throttle that to avoid too much blinking of the bsTab and
    too much re-rendering of the popup?

- Remove from SettingsStore.js the stuff that doesn't belong there
  * See comment at top of file. Dose background.js really need the
    "NormalizedTabs" class or the "ShortcutManager" class?
	- Yes to both (see TabsManager)

- BUG: console.log() and console.info() are the same thing in Chrome,
  so our functions this._log() and this._log.info() are the same thing...
  maybe we should use console.debug() as this._log()?
  * With or without renaming this._log()?

- Can we re-use tiles as we do full re-renders?
  * Right now we just discard all the existing tiles and create new ones
  * Ideally we should reuse tiles for the same tabID, to also minimize the
    chances of body re-rendering (this implies creating a function during
	body updates that validates whether or not the tab info has changed at all)

- BUG: when closing and reopening popup, the scroll goes back to the top, we should
  remember the scrolling position when the popup was closed
  * Or should "go back to top" be expected to be the right behavior?

- Time slice settings (fixed or relative times), just do fixed times for now

- Create new window event to attach more tabs later (the event fires when the basic skeleton is
  ready to accept bstabs insertion), so we can cut the “global” tab from first release but keep
  its insertion functional without touching popuptabs
  * Actually maybe best to just add a "register" to push all the plugins that want to be attached,
    so they can push in the order in which they want to be attached

- Use chrome.tabs.captureVisibleTab() to capture a screenshot of the tab
  * Works only when the tab is active

- Organize groups by host name inside top level groups (second level)

- Implement "recent" tabs
  * Start with TabsManager::_notifyPopup()

- Keyboard navigation through tiles

- Boot-up performance: can we make the tiles appear faster?
  * Are the 4 shortcuts in 4 different chrome.storage.sync variables causing a delay?
  * Should we decouple the rendering that depends on settings from the rendering that
    doesn't to speed up settings-independent rendering in parallel with loading settings?
	- It looks like "window.onLoad" takes longer than loading settings (and they happen
	  in parallel), so we can't get any value from this, since we must wait for
	  "window.onLoad"
  * Render tile menus only when users click on it, or when they hover long enough on
    the tile to show the menu dropdown toggle?
	- https://davidwalsh.name/css-animation-callback
	- To trigger creation of a menu when the dropdown toggle shows up (delayed by CSS rules),
      instead of creating the menu immediately when the tile is being rendered
	- Probably not as useful now that we have async rendering of tiles body, but
	  it might still help by reducing the cost of these async tasks (and therefore
	  freeing up cycles to do something else that currently would be waiting)

- Work with tab groups, introduced by Chrome in 2020
  * https://dev.to/otomer/google-chrome-s-new-update-finally-allows-you-to-organize-tabs-easily-this-is-how-you-can-use-it-3f99
  * Note that tab groups only work within a window
  * Unclear how to query for group properties (name and color)
	- Still work in progress, see here for updates: https://bugs.chromium.org/p/chromium/issues/detail?id=1106846
	- There should soon be a chrome.tabGroups API
	- Actually it's here: https://developer.chrome.com/docs/extensions/reference/tabGroups/
	  * But only available to the dev channel as of 21.01.24

- Implement https://developer.chrome.com/docs/extensions/reference/runtime/#event-onUpdateAvailable
  to force an update of the extension for users that never close their browser
  * Maybe offer the option to update in the "Settings" menu?

- Contact this guy to review my extension
  * https://www.computerworld.com/article/3535189/chrome-tab-switcher.html

- Stop querying chrome.tabs.query in the popup, and do the querying only in the backgrond
  * The background should manage the "normalization" step too, and just notify the
    popup with the pre-normalized tabs list
	- This should save some time at popup opening time, since the popup won't have
	  to manage the query and normalization
    - Even if it doesn't save visible time, it will still reduce the amount of processing
	  caused by the popups, since eahc popup needs to query/normalize independently
	  * The only side effect is that the background might have to do this at all
	    times, even when no popup is open, but it already has to do that, in order
		to manage correctly the custom shortcuts

- Find a notification to update in real-time when the user changes isAllowedIncognitoAccess()
  * This notification doesn't seem to exist today
  * Should we poll?

- Find a better way to implement chromeUtils.getExtensionId()

- When a tab has a load error (which prevents injection of inject-getMeta.js)
  display a special error icon to identify the tab failed to load (e.g. because
  of network down) (search "network down" in the code to find the place where
  this check is made)

- Implement TileMenuViewer._updateShortcutMenuItems()
  * Or do we really care, given that most of the times we need to rebuild the
    entire set of tabs from scratch


ENVIRONMENT

- Upgraded GIT to v.2.30.1.windows.1
  * To upgrade:
    > git update-git-for-windows
  * Repo at: https://github.com/marcodb26/TabMania.git
  * To clone
    > git clone https://github.com/marcodb26/TabMania.git

- Upgraded NPM to v.7.5.4
  * To upgrade:
    - Run PowerShell as Administrator
      > Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
      > npm install -g npm-windows-upgrade
      > npm-windows-upgrade
  * Created project with "npm init"
    - Edited package.json to make project private
	  * Add line after "description":
		> "private": true,

- Installed uglify-js v.3.12.8
  > npm install uglify-js --save-dev

- Installed csso-cli v.3.0.0 (https://www.npmjs.com/package/csso-cli)
  > npm install csso-cli --save-dev
  * Really liked the documentation of cssnano (https://cssnano.co/docs/getting-started), but
    decided to go with csso because it seemed to be more "independent" of other modules

PREPARING DIST

- Copy /src/manifest.json to /dist/manifest.json

- With /dist/manifest.json
  * Replace all background.scripts with just "background.js"
  * Remove permissions "tabGroups" (until they become available in the stable channel)
  * Rename "default_popup" from "popup/popup.html" to "popup.html"
  * Remove all comments
  * Remove "https://cdnjs.cloudflare.com" from "content_security_policy" at the bottom,
    since that's only needed for Font Awesome

- Copy /src/popup/popup.html to /dist/popup.html

- With /dist/popup.html
  * Replace all local <script> tags (including all "inject" tags) with just "popup.js" (no "/popup/" folder)
  * Remove Font Awesome stuff
	- <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" rel="stylesheet">
	- <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/js/all.min.js"></script>
  * Remove all comments

- Copy /src/images to /dist/images

- Create /dist/content

- Run "npm run uglifyBg" to minify dist/background.js
  * "uglifyBg" should include the option "--compress", but that option triggers strange
    warnings (it reshuffles uses of variables and starts finding "Dropping duplicated definition
	of variable [xyz]"), plus it discards the unused "tmStats()" (which we'd like not to discard)
	- All of this for a gain of 2KB (from 52KB to 50KB, without "--mangle"), not worth it
	- We also tried --mangle, without "--compress" it takes the code down from 52KB to 45KB,
	  but again you lose "tmStats()"
	- We'll clean this up later and possibly add back --compress and --mangle
	  * And also add back --source-map once we understand if we really need it

- Run "npm run uglifyPopup" to minify dist/popup.js
  * Try to use "--compress" temporarily just to see if it comes up with any useful warnings...
  * Without --compress the code amounts to 113KB, with it (but no --mangle) it's 109KB
    - No difference at all...
	- With --mangle --compress we're down to 95KB (but again, for now let's build without these options)

- Run "npm run css" to minify dist/popup.css

- Run "npm run uglifyInject" to minify dist/content/inject-getMeta.js