DONE 2.0

- Added github-release-cli v2.0.0

- Added automation for creation of GitHub releases (`npm run github-release`)

- Updated uglify-js from v.3.13.2 to v.3.13.4

- Added job name to all instances of ScheduledJob

- Updated NPM from v.7.7.5 to v.7.10.0

- Move new tabs to LTW: intercept new tabs creation and apply "least tabbed window" logic
  * User configurable (tabs from other applications, tabs from other tabs, and new tabs)
  * Excludes "chrome-extension:" tabs
  * Excludes tabs opened in the background (e.g. CTRL+click)

- Auto-start undocked popup when starting Chrome
  * Configurable option (default "false")

- Added support for "help" string in settings checkboxes (Classes.SettingsCheckboxItemViewer)

- Improve sequence of LTW open tab
  * First set back active tab in old window, then move

- New tab dedup: when opening a new tab with a URL, intercept the tab creation and determine if
  the URL is already opened in another tab, in which case activate that tab
  * User configurable
	- For now not distinguishing between tabs from other applications, tabs from other tabs,
	  and new tabs
  * We're matching the full URL (including fragment), we never switch an existing
    tab to a different fragment
  * It works only for new tabs opened from other applications or new empty tabs
    - For new tabs opened from other tabs, the URL field gets set only on the first "onUpdated",
	  not at "onCreated"
  * Excludes "chrome-extension:" tabs
  * Excludes tabs opened in the background (e.g. CTRL+click)

- BUG: popup windows get moved to the LTW, we should leave them alone

- Changed default for "open in LTW" and "dedup new tab" (new features of this release) to be
  disabled by default
  * We don't want new users to observe "strange" behaviors when they install the extension

- New tab dedup: add configuration option to deduplicate classes of Chrome new tabs on creation
  * Tabs from other applications, tabs from other tabs, and new tabs
  * Default "false" for all

- Split chrome.tabs events processing from tiles rendering
  * The new "TabsManager" offers a more uniform set of events downstream, and the new tiles
    rendering logic should use that instead of the native chrome.tabs events
  * Goals
    - Reduce number of times a full tiles re-render is triggered
	- Add support for partitioning events space between standard and incognito tabs
	  * To later enable them to stream into two different classes and two different viewers

- BUG: activating a bookmark or history item fails to reuse an existing tab if the URL has a fragment

- Cleaned up relationship between pinned bookmarks and tabs inheriting pins from pinned bookmarks
  * TabsManager manages only standard tabs, some of which might have inherited pins from pinned bookmarks,
    and can tell the list of bookmark IDs matching the tabs' pin inheritance
  * BookmarksManager manages only pinned bookmarks, but getPinnedBookmarks() can now filter out
    an array of bookmark IDs
  * TabsBsTabViewer puts the information together
    - The filtering is just a rendering feature

- Search works again (continuation of refactoring of the previous bullet)

- Trying to reduce reliance on full re-rendering during updates (no performance profiling done
  yet after refactoring though)

- SearchQuery.search() must not change "tab.tm" to include "searchStats" and "unoptimizedSearchStats"
  * It causes tmUtils.isEqual() to identify tabs as "changed" when they in fact have not changed
  * Experienced as: BUG: generateDiffEvents() shows 177 tabs changed when changing active tab of a window
    from TabMania in search mode

- BUG: in search mode, some tabs from _tabUpdatedCb() don't have a tile, and we need to validate
  if a tile actually exists

- Improved debuggability of tmUtils.isEqual()

- "wantsAttention" flag was interfering with the tmUtils.isEqual() function because we used to treat
  [ "wantsAttention" missing ] == [ "wantsAttention" set to "false" ]
  * Now always forcing it to have a value, no more "default to false if missing" to make sure the
    "tab" object comparison can always succeed
	- Also moved "wantsAttention" from top level to inside "tab.tm"
  * Experienced as: BUG: the extension's tab sometimes has "wantsAttention", sometimes doesn't, and shows
    up as changed when you make any other tab active

- Using new throbber animation for tabs in "loading" state, better aligned with the animation used by
  Chrome itself while tabs reload

- BUG: refactoring of NormalizedTabs.js caused errors in background pages
  * Requiring "bookmarksManager", but background pages don't have a boomarksManager

- BUG: open in least tabbed doesn't work from OneNote
  * Not reproducible now
  * Probably just a fluke since there was a bug in NormalizedTabs.js for the background page

- Added custom HTML attribute "data-tab-id" to each tile to simplify debugging by supporting easily mapping
  each tile to a tab ID when inspecting the HTML

- BUG: tmConsole.showTabInfo(<tabId>) fails in devtools console
  * This function should have been refactored when we did the split of some code into TabsManager.js

- Hostname-based groups now have custom group titles for special cases
  * "[ Pages on this device ]" for protocol "file:" (no hostname)
  * "[ New tabs ]" for "chrome://newtab/"
  * "[ No hostname ]" in general when a hostname is missing
    - Before we would just end up with a group with an empty name, including for local files,
	  since we didn't treat "file:" as a special case

- NormalizedTabs.js code cleanup
  * Split "TabNormalizer" from "NormalizedTabs" and removed all the ugly static functions
  * Cleaned up normalizeTab() initialization to cleanly support multiple calls on the same tab
  * Added option to separate normalization from adding shortcut badges


DONE 1.3

- Updated NPM from v.7.5.4 to v.7.7.5

- Updated Bootstrap from v.5.0.0-beta2 to v.5.0.0-beta3
  * Then downgraded back to v.5.0.0-beta2 due to a bug with dropdowns
    - Dropdowns become unclickable, not sure why
	- Bootstrap never adds the "show" class
	- Switching from <a> to <button>, Bootstrap starts giving exceptions on the console
	  every time you click a dropdown toggle ("... classList of undefined")

- Updated uglify-js from v.3.13.0 to v.3.13.2

- Updated GIT from v.2.30.1.windows.1 to v.2.31.1.windows.1

- Removed "strip-json-comments-cli" as we're no longer using it
  * Used command `npm uninstall -D strip-json-comments-cli`

- Removed last standing Javascript comment from manifest.json.ejs
  * And removed "auto-generated" comment from dist version of manifest.json (DEV version ok)

- Update package summary in manifest.json.ejs

- Move to top of tiles list any tab that is changing title too frequently
  * The "wantsAttention" logic
	- Move a tile to the top if its title is changing frequently, and avoid a full
	  refresh once that condition has been identified

- BUG: TmConsole.js was not included in background page, so all the "tmConsole" commands
  listed in README-DEV.md were not working from there...

- BUG: when localStore doesn't have a value for "top" and "left" of the undocked popup,
  the undocked popup gets created 3/4 outside the screen on the top left, only the bottom 1/4
  is visible, making it very hard to move it (since the title bar is completely out of the
  screen)
  * Tested on a laptop screen + external monitor with laptop screen set as primary
    - I was not having this problem when the external monitor was set as primary instead
  * The API defaults of chrome.windows.create for "left" and "top" seem to be awful,
    best to force a known value for "left" and "top" regardless

- BUG: there could be multiple concurrent calls to ContextMenu._onShortcutUpdatedCb() if
  users make multiple changes quickly (or when calling testSettings() from popup.js with
  empty sync storage, as it happened in this case). When that happens, each call will
  wait on the chrome.contextMenus.removeAll(), then each call will try to create new
  shortcuts with this._addAllMenuItems(), resulting in duplicated entries
  * We need to serialize these calls and avoid concurrent calls
  * The console showed this:
    10:33:07.435 ContextMenu.js:208 [41] ContextMenu::_onShortcutUpdatedCb(90shortcut): menus cleared, building them again
    10:33:07.437 ContextMenu.js:208 [41] ContextMenu::_onShortcutUpdatedCb(91shortcut): menus cleared, building them again
    10:33:07.438 ContextMenu.js:208 [41] ContextMenu::_onShortcutUpdatedCb(92shortcut): menus cleared, building them again
    10:33:07.505 chromeUtils.js:27 [3] ChromeUtils::wrap().cb: ContextMenu::_addAllMenuItems().iter(moveToLeastTabbed): chrome.runtime.lastError = Cannot create item with duplicate id moveToLeastTabbed
	[ ... then more, one per menu ID, repeated twice for each menu ID ... ]

- Don't allow TabMania tile to close itself
  * Actually none of the menu items in the dropdown make sense for the TabMania popup,
    so we should simply disable both dropdown and close icon
  * In the process of writing this code, cleaned up TabTileViewer to rely on _renderState
    to decide to show/render menu and close button (before this code was still ad-hoc)

- More "tab" -> "bsTab" cleanup (done now?)

- All tabs sharing the url of a pinned bookmark now inherit the pin
  * Before only the first tab in the list was inheriting the pin

- Standard Bootstrap accordions have a bothering blue tint when expanded
  * And a bothering blue aura when they have the focus
  * Removed the tint and aura
    - Initially applied this change only to custom group accordions, later expanded
	  to all collapsible groups

- Got rid of the ugly URL at the bottom of the undocked window when hovering over a bstabs
  * Replaced <a> with <button> for nav-tab
  * Also removed the "cursor: pointer" for bstabs

- Improved date visualization in BookmarkTileMenuViewer._renderSubtitleHtml() and
  HistoryTileMenuViewer._updateTitleMenuItem()
  * Added day.js to display relative times
    - It should be much smaller than moment.js and offer similar functionality

- Disabled TabMania context menus on the TabMania popup itself
  * The chrome.contextMenus.create() API uses "match patterns", which don't offer very granular
    URL filtering (specifically, doesn't allow to exclude individual URLs), so I had to exclude
	all URLs with schema "chrome-extension", but that should be ok
	- https://stackoverflow.com/questions/42814357/how-to-create-an-exception-for-all-urls-in-chrome-extension

- "Home" bsTab is now unselectable (especially important when using touch screens)

- Touch screens cleanup
  * Prevent Chrome context menu from appearing when users hold their finger on a tile long
    enough to generate the simulated "mouseover" event
  * Automatically open dropdown menu on "mouseover" events simulated by touch ("pointerover")
    - Only for tap-hold in place, no movement
	- Don't open dropdown if the tap was short (a click)
    - Don't open dropdown if the tap-hold is due to a scroll gesture

- If you open a dropdown menu and hover away from the tile (without clicking menu items or otherwise
  closing the dropdown explicitly), make sure the menu gets closed automatically

- BUG: tiles of groups (group headings) show the broken image as favIcon when inheriting a broken
  favicon from one of the tiles they contain
  * The contained tile doesn't show the broken image because they can respond to the error and
    replace the URL with a cached favIcon
  * Now every tab includes its cachedFavIcon, and GroupBuilder inherits both facIcon and cachedFavIcon
  * Cleaned up image error handling logic, so it can be applied to both tab tiles and group heading tiles

- If the browser is offline, use the cached favicon without waiting for the <img> tag to trigger
  the URL loading error logic

- Added bookmark folder on tile's second line of text

- BUG: when moving a bookmark to a new folder, search results (for searches using the "folder:" modifier)
  don't get updated

- BookmarksManager's _applyBookmarkChangeCb() and _applyBookmarkMoveCb() claim to ignore notifications for
  untracked bookmarks, but then notify their listeners...
  * Cleanup that logic, we now do nothing for untracked bookmarks, except adding to stats
    of untracked events

- BUG: when bookmark title or URL are edited on an existing bookmark, BookmarksManager wasn't updating
  all the search support data structures

- BUG: Pinned custom groups don't show the color on their left border when they're empty

- Non-active bstabs now get hidden when they get too small and they would want to go on multiple lines

- BUG: top level menu doesn't close when typing into search box
  * Either starting with searchbox closed, or already open

- Disable the "suspend" tile dropdown menu item when a tab is already suspended or unloaded
  * It will be automatically unsuspended when opened

- When performing the "suspend" action, if the tab being suspended is active, make some other
  tab active before suspending/discarding the current tab
  * Chrome has the bad habit of reactivating a suspended tab that's currently active, when
    the user clicks on another tab in the window(!)

- Added a throbber around the favIcon of a tile to indicate the tab is in "loading" status
  * Very similar visual to that used by Chrome in the tab itself

- Cleaned up sizing and vertical-align of tiles text
  * These changes fixed a couple of known bugs:
    - BUG: the ellipsis of .text-truncate are not vertically align with the title of a tile
	  now that the title of the tile uses Bootstrap's .align-middle (vertical-align: middle;)
	  * They were align to the baseline of the text before the .align-middle change...
	  * .text-truncate is in the parent element, but setting .align-middle there too has
		no effect at all
	- BUG: lowercase "g" gets cut in tile title
  * Also fixed vertical-align and spacing of bookmark/rcItem/hItem icons to stay aligned
    with the new changes
	- And of thumbtack and volume icons too

- Pulse favIcon for tiles in "wantsAttention" state

- Blink "Home" tab when updating a single tab (not only for full re-query/re-render)
  * Needed to inform users about a "wantsAttention" tile when the popup is scrolled
    away from top

- BUG:
  [4] ChromeUtils::wrap().cb: TabsBsTabViewer::_issue01Workaround(): chrome.runtime.lastError = No tab with id: 1993. (anonymous) @ chromeUtils.js:27
	popup.html:1 Uncaught (in promise) {}
	Promise.then (async)
	_issue01Workaround @ TabsBsTabViewer.js:456
	setInterval (async)
	_safeSetInterval @ ScheduledJob.js:174
	start @ ScheduledJob.js:100
	(anonymous) @ TabsBsTabViewer.js:908
	Promise.then (async)
	_queryAndRenderTabs @ TabsBsTabViewer.js:887
	run @ ScheduledJob.js:64
	_tabCreatedCb @ TabsBsTabViewer.js:318
  * Removing tab when "onRemoved" notification received, though this might not cover 100% of cases

- Added a top level menu group to pick a different bstab
  * Needed when the window is too narrow and only the active bstab is visible
  * The new group of menu items shows up only when the popup is undocked (never needed when docked)

- Forced ".tm-select-none" on the bstabs headings
  * Otherwise users could select the text in the bstabs heading by starting the selection mouse
    action in the popup menu

- Fix double horizontal scroll bars when undocked popup is very narrow
  * Tried "overflow-x: hidden" on the top heading <div class="d-flex...>, but that
    causes the main menu to disappear at the height of the heading.
	- Apparently "overflow-x" also sets "overflow-y"...
  * The only working option seems to be to set "overflow-x" on the <body> tag :-|

- Adjusted .tm-dropdown-menu in MenuViewer to be used only by tile menu viewer, not
  by PopupMenuViewer
  * Now renamed ".tm-dropdown-tile-menu"

- Fixed .tm-dropdown-item to avoid removing the "nowrap" all the time, as in most cases
  we do want "nowrap"
  * Triggered a bit of refactoring to switch the Classes.MenuItemViewer constructor to
    use the "options" pattern
	- And fixed the "options" pattern everywhere it's used to force a shallow copy of
	  the "options" in input

- Introduced a bug while refactoring the "options" pattern: the "options" parameter needs to
  be optional

- If a tab/bookmark/history doesn't have a title, use the URL as title of the tile
  * Some browsing history items appear to have no title

- Custom group tiles rendering improvements
  * Remove extra gap between custom group containers and other tiles
  * Make the custom group button fully rounded when expanded
	- The default Bootstrap style has it only rounded in the two top corners

- Use custom (tiny) scrollbars when the popup is very narrow
  * Needed to make the undocked popup look slicker when very narrow and long
    - The vertical scrollbar takes up precious real estate in that case, and forces
	  the popup to be slightly wider to get the same amount of visible text

- Hide bstabs completely when popup very very narrow, to avoid main menu being pushed
  out on the right side of the screen

- Renamed HTML IDs "popup-tabs-*" to "popup-bstabs-*"


DONE 1.2

- Delete from git src/notes.txt and src/notes1.1.txt
  * Contents restructured and distributed between README-DEV.md, src/roadmap-todo.txt, src/roadmap-done.txt
    and "src/performance history.txt"

- Updated uglify-js to v.3.13.0

- Add devTools function to retrieve a specific tab and its tile and dump them to console

- Add a "selection" context menu to launch a tab search in TabMania with the selected text

- Restructured search code into a new SearchQuery class

- More sophisticated parsing of the search string, trying to match the syntax used by
  google search
  * https://support.google.com/websearch/answer/2466433?hl=en
  * https://ahrefs.com/blog/google-advanced-search-operators/
  * Support for "AND" and "OR" binary operators
    - "AND" has precedence over "OR" (not sure if Google does this)
  * Multiple tokens separated by spaces are considered having implicit "AND"
  * Support for unary operators
    - "-" to indicate exclusion/negation
	  * Replaces the "!" we used before
	- Other operators TBD, based on the syntax "<oper>:"
	- The text affected by the unary operators must be attached to the unary operators,
	  no whitespaces allowed
  * Use quotes (single or double) to indicate exact match (or to escape "AND" and "OR")
  * Use "\" to escape quotes, "-" and ":" (and of course "\" too) (not sure if Google
    does this)
  * This should be compatible with using the "+" as launch/search (?)

- Added basic optimization for search evaluation, using C-style "short-circuiting behavior"
  for binary operators (if the left operand is enough to determine truth value, don't
  evaluate the right operand)

- Search: implement unary operators
  * Support: "site:" (search only hostname), "intitle:", "inurl:", "inbadge:",
    "ingroup:" (checks only custom group labels assigned to a tab)

- Search: clean up modifiers during unaryOp parsing
  * If the user enters a modifier that doesn't exist, discard it silently

- Search: replace raw strings (token types) with proper enumerations (cleanup)

- Search: measure performance
  * 24ms to filter 211 standard tabs and ~500 bookmarks, with search query "a b c d e f g"
    (entered via CTRL+V so it executes all in one go)
	- Generating 257 results
	- "a b c d e f g" should be a relatively expensive query because the implicit "AND" means
	  each property of each tile needs to be checked 7 times (one per letter, no optimizations)
  * 5ms to filter if you search for only "a" and get 675 results

- Added debug function tmUtils.showSearchParserInfo() to monitor how SearchQuery is interpreting
  the user input in the search, and to show some search statistics

- Added a simplified query string (purged of operators) to pass to BookmarksFinder
  and HistoryFinder
  * Not really helping much, Bookmarks seem to take the strings as "and"

- Show "dateAdded" for bookmarks in dropdown details

- Added new BookmarksManager class to replace BookmarksFinder, as chrome.bookmarks.search()
  is too inadequate to support our search needs
  * Bookmarks now include the hidden search badge `bookmark`

- Improved performance of BookmarkTileMenuViewer._updateTitleMenuItem() by providing a sync
  version of the folder path building logic leveraging the bookmark shadow data in bookmarksManager

- For the tiles of open tabs representing bookmarks (e.g. chrome://bookmarks/?id=686),
  try to query the name of the bookmark id (e.g. id=686)
  * It should always be a folder
  * List the folder name in the title?

- Add rate-limiting to the frequency of the calls to BookmarksManager._loadBookmarks()

- Removed "Close" button and "Delete" menu item for bookmarks marked unmodifiable

- BUG: chrome.bookmarks.getRecent() doesn't return folders, switched to chrome.bookmarks.getTree()

- Enable/disable bookmarksManager based on configuration

- BUG: quotes mid-token should be just consumed as part of the token, and not trigger
  a new token

- BUG: SearchQuery.rebuildQueryString() was not propagating fullRebuild through its recursion

- BUG: SearchQuery was not resetting parsedQuery if a query that parsed to "null" (no tokens,
  no parse nodes) was set in the update() call after a non-empty update()

- Support regex in search
  * r:"^blah.*blah$"
  * Case insensitive
  * The quotes are optional, needed only if you need to use whitespaces in the regex
    - Whitespaces are regex delimiters if you don't use quotes

- When we fail to load a favicon, attempt to use the cached favicon instead
  * BUG: when websites disappear, icons shown in tiles are broken icons

- Fixed the escaping story: escaping at top level, in quoted string and in unquoted regex
  are 3 different things, and we should do minimal escaping for each context. E.g. in
  quoted string you only need to escape the matching quote, not all escapable characters,
  and you should consider \ escaped only as \\” while any other occurrence of \\ should
  be considered two \

- Fixed search query delimiter story: now """, "'", "(", " " and "\t" are unified
  as delimiters (unless you're in a quoted string or unquoted regex string) and
  cause the previous token to be considered complete

- Fixed error message for invalid regex in search query
  * Now we show the regex parse error on the console (for /dist users)
  * Now when we run a query with an unparsable regex, the evaluation of the regex node
    will always return "false"

- Add minimal parentheses to textual version of parsed query by using parent operator precedence
  (app parentheses only if parent operator has higher precedence)

- Check performance difference between regex and includes(), if regex is faster maybe we
  internally turn everything into regex
  Result: yes, let's do it

- Changed search binary operators to support multiple operands

- Added type information to regex sources, prerequisite to then:
  * Filter duplicates (post escaping) for both text and regex nodes
  * Filter substrings (keep only the longer/shorter string) only for text nodes

- BUG: merging type TEXT/QUOTEDTEXT into a regex was missing the regex escaping

- Added a few optimization heuristics:
  * Convert OR operands to regex
  * Promote unary operators over OR/AND to ease grouping
  * Remove duplicated text operands or text operands that are substrings/superstrings
    of other operands (sub/super depending on AND/OR)
  * Merge chained binary operators as a single operator with multiple operands
  * Prune redundant unary operators (binary or modifiers)
  * Sort operands and regex sources to generate more consistent query string rebuilds
    (planning to need tihs later)
  * Force sources to be read-only by using Object.freeze()

- Split optimizer logic out of SearchParser and into its own class SearchOptimizer

- Added negated operands to _mergeBinaryOperands(): two negated operands can be merged,
  but we can also do interesting things with pairs of one negated and one non negated,
  like the next item:

- Added optimizations to track simple tautology/contradiction cases, and corresponding
  new node type "TRUTH" to let them propagate in the parse tree
  * E.g. the query   a -a   will now generate a parsed tree with one <FALSE> TRUTH node,
    and the query   a OR -a   will now generate a <TRUE> TRUTH node
  * As AND/OR operands, TRUTH nodes either disappear, or cause the AND/OR to disappear
    - "<FALSE> OR <other conditions>" === "<other conditions>"
	- "<TRUE> OR <other conditions>" === "<TRUE>"

- Added limit to number of optimizer iterations, to avoid potential infinite loops

- Added heuristic to promote unary modifier over unary boolean (let the "-" go as
  low as possible in the parsed tree)
  * E.g. in a query like
        -site:"google.com" AND site:"mail.google.com" OR site:"amazon.com"
    we could take out the first AND if the "-" was after "site:", not before

- Added logic in dev to run both optimized and unoptimized search to validate the optimized
  search is really equivalent to the unoptimized search
  * Also added some stats for the unoptimized search to compare the optimized/unoptimized
    evaluation performance

- BUG: query string -site:(google.com or cisco.com) or site:amazon.com or site:r:z* does not
  merge amazon.com and r:z* into a single regex
  * It's now working, not sure exactly which additional heuristic started making it work

- BUG: the search text inurl:chrome:// returns everything, why???
  * It's now working, not sure exactly which additional heuristic started making it work

- Added setMessage() in home BsTab to open a small overlay window to report messages to
  users

- Reporting regex compile errors to the user via the home BsTab's setMessage() call

- Change "inbadge:" operator to "badge:" and "ingroup:" operator to "group:" (matching
  the "site:" syntax instead of the "inurl:" syntax)

- Added folder information to all bookmarks (added by NormalizedTabs)
  * To have the folder information available on time for this, decided to now sort all
    bookmarks from chrome.bookmarks.getTree() so that folders are on top
	- Before they were just sorted by dateAdded, now dateAdded is secondary to folder/bookmark

- Added new "folder:" unary modifier to search by folder
  * As a side effect, now search terms without unary modifiers get filtered against
  "folder" too

- _dropWhat() is now skipping though unary modifiers/boolean to work directly on possible
  leaf nodes under them
  * Support dropping of redundant nodes under unary modifiers compared against nodes
    without unary modifiers
	- E.g. "google.com or site:-google.com" is now correctly identified as a tautology

- Removing all unary modifiers and processing unary booleans for tautologies/contradictions

- BUG: _dropWhatForTruth() was ignoring negation

- Improved normalization of tab titles
  * Now only alphanumeric characters (a-z0-9) at the beginning of a title string count
    as title start for sort

- Support pinning bookmarks
  * If a pinned bookmark is open, show only the open tab, not the bookmark
  * If the corresponding tab is not pinned, the tab shows the thumbtack icon in gray,
    to indicate the pinning is inherited from the pinned bookmark
  * Users can unpin a pinned bookmark from the corresponding open tab
  * While loading a tab associated to a pinned bookmark, we overwrite the placeholder
    title added by Chrome (uses the URL as title) while waiting for the tab to load,
	and set the title to the title of the bookmark we know
	- This makes the tile transition smoothly from the bookmark to the tab, without
	  the tile dancing around the TabMania popup too much (if we let the title change
	  temporarily to the title of the URL, the sorting of the tile would change, and
	  therefore the tile would move elsewhere)

- Add a readable label to ScheduleJob jobs, the current "handleId = 27" is completely
  useless...

- Implemented workaround to address the following Chrome bug:
  * Sometimes opening a new tab or reloading a tab causes the tab to stay in "loading"
    status until some other event in the future triggers a full refresh.
    During pinned bookmark testing we saw this sequence pretty consistently:
    - UPDATE1: changeInfo: status = complete (and indeed the tab data shows that)
    - UPDATE2: changeInfo: title = xyz (but the tab data show status = "loading",
      though status is not listed in changeInfo)
    - chrome.tabs.get() triggered by UPDATE2: if done too soon after UPDATE2,
      the query says that status = "loading", while if you wait a little longer,
      it says that status = "complete"
      * Not clear what's the right amount of time we should wait, for some websites
        0.5s was enough, during a reload of Yahoo Mail 5s was not enough
        - But in both cases, you'd see a transition to "complete", then back to "loading"

- BUG: when closing a tab from a pinned bookmark, the pinned bookmark shows up
  instead of the tab, but its dropdown menu remains hidden (hovering doesn't show
  the dropdown toggle)
  * Generic issue happening when an AsyncQueue was getting discarded before processing
    the initial menu constructor

- BUG: when you click a menu or a close button, the searchbox loses focus and doesn't
  recover it even after the menu/close click is over
  * Probably related:
	- BUG: in search mode, when the searchbox is not in focus, CTRL+A should select the full
	  text of the searchbox, but instead it selects everything on the entire page

- BUG: pinned bookmarks show up twice in search result at the beginning of a search
  * Then the duplicate disappears as soon as the first full refresh is done while in search mode

- BUG: pinned bookmarks can't be found with search query "badge:pinned"
  * Forgot to add the "pinned" search badge for pinned bookmarks

- BUG: "group:shopping and badge:bookmark" returns zero results, though if you search for
  just "badge:bookmark" you'll see results in group "shopping"

- Default pinned bookmarks to not-show up if they're a prefix of a tab's URL
  * After 1.2 we'll worry about creating an option for full match vs. prefix

- Bring undocked popup to foreground when the "selection" context menu to launch a tab search
  in TabMania is used

- Basic /dist build automation
  * manifest.json and popup.html now are auto-generated from EJS templates
    - Both for DEV ("npm run build-dev") and for dist ("npm run dist")
  * Source files and version are now tracked in src/templates/sources-env.sh
  * Zip /dist to past-releases/vX.Y

- BUG: if moving back from search to standard mode while search is still loading, very rarely
  search can show an exception on the console


DONE 1.1

- Add back this._getTabMetaTags() to TabTileViewer::update()
  * And add back host permission "*://*/*" to allow the code injection to run properly

- Moved release process to README-DEV.md

- BUG: need to discard settings events if they arrive before the TabsTabViewer chrome
  query has completed, while _normTabs is still uninitialized

- Learned chrome.extension.getBackgroundPage can't be used in the injected content scripts

- Updated Bootstrap to v.5.0.0-beta2

- BUG: Shortcut05 can't be invoked

- Added Base._log.bg() and Base._err.bg() to direct popup log/error messages to the console
  of the background page

- Track changes to localStore.isPopupDocked() (use event listener) in all opened
  popup windows to close automatically when the docked state changes
  * We should not have more than one undocked popup, but we could have more than
    one docked popup

- Removed fixed "width: 400px" from initialization to support the undocked case
  * We force the width and height of <body> in popupDocker only when the popup is docked
  * This fixed an issue with double scroll bars vertically
  * We still have an issue with double scroll bars horizontally (when very small width)

- Fixed behavior of this._errorMustSubclass(), the changes made to help uglifyjs
  felt suspicious

- Review code to verify there are no other silly this._err() in there (like those attached
  to user input validation, that didn't make sense)

- Include bookmarks in search results, besides open tabs
  * https://developer.chrome.com/docs/extensions/reference/bookmarks/#method-search
  * Add option to include or not bookmarks in search results
    - Auto-updates search results if changed while a search is in progress
  * Manage pressing "Enter" when a bookmark is first in _currentSearchResults
    - Can we unify the behavior of "Enter" and "tile click"?
	  * They're currently in two different classes...
  * Use tile "close" button to delete a bookmark
  * Decide what happens when you click a bookmark
    - What happens if you click a bookmark that's alreay opened?
	  * Now it will try to recycle the existing tab instead of opening a new one
  * Discard a bookmark if it's also loaded
    - Do we care to do this, is it ok if it shows up twice?
	- NO let's show it twice
  * Make sure bookmark search works correctly with search modifiers
    - Avoid it if the "!" modifier is added
	- For "^" we filter initial chrome.bookmarks.search() results for beginning of
	    title or URL or custom group badge
  * Update search results when bookmarks change
  * Define Extended ID of bookmark as "BM[parentID].[bmID]"
  * Replace the "bookmark" badge in bookmark tiles with some other visual clue
	- We should not show a badge because one can't search the keyword "bookmark"
	  * It would be crazy to show just a flat list of all bookmarks
  * Limit search results to 500 bookmarks to avoid slowing down search too much
    - Otherwise single-letter searches can take forever for heavy bookmark users

- Recognize CTRL+V in the keydown handler, and open the searchbox just in time to capture
  the pasted text
  * If the clipboard doesn't have text, the searchbox will close again

- Show bookmark folder path when opening bookmark menu

- Add option "Go to folder" to open the folder of the bookmark in Chrome's bookmark manager
  * Just set URL to "chrome://bookmarks/?id=686", with the ID of the parent folder
    - This didn't seem to require a trip to the background page to launch...

- BUG: we should not keep bookmark folders in search results, they don't have "url":
  * TabsTabViewer.js:593 [popup-tabs-home] TabsTabViewer::_renderTabsFlatInner(): iterating through tabs, at tabId 812 TypeError: Cannot read property 'startsWith' of undefined
    at Object._cleanupUrl (TileViewer.js:299)
    at Object.update (TileViewer.js:328)
    at Object._init (TileViewer.js:29)
    at Object.createAs (utils.js:167)
    at Object.create (utils.js:121)
    at Object._renderTile (TabsTabViewer.js:623)
    at utils.js:1120
    at Array.forEach (<anonymous>)
    at Object._renderTabsFlatInner (TabsTabViewer.js:590)
    at Object._searchRenderTabsInner_Merged (TabsTabViewer.js:830)

- Center the "Settings" bstab now that undocked popups can have their width expanded

- Mitigated ugly slowness when rendering large number of tiles my forcing min-height to 3em
  * Still not great, and besides 3em is not the right size of the tile when it's populated...

- Added AsyncQueue class and worked on improving rendering performance when many
  tiles need to be rendered

- Added support for searching among the recently closed tab
  * Controlled by a settings option
  * Use the search badge "closed" to list them
  * Tiles of recently closed tabs don't have any dropdown and don't have a "close" button,
    because the only action you can take on them is to restore them
	- When restored, a tab disappears from the recently closed list
  * Chrome only returns a maximum of 25 tabs and windows, so don't expect a lot of history
    - Most of the 25 could be taken by windows to be restored from the last reboot, and
	  unfortunately due to a bug with chrome.sessions.restore() we must suppress them
	  (and anyway they would be duplicates of open tabs). Things get better a few hours
	  after the reboot, when normal windows and tabs take over the recently closed tabs
  * Incognito tabs are not saved in "Recently closed" when closed

- AsyncQueue: add high priority and low priority queues

- Activate search results count badge immediately (empty?) when the initial search starts,
  otherwise we have no visual cue that the search is in progress
  * The current blinking cue shows up only after the first search, after further
    edits to the search string

- Added favicon to undocked popup
  * Without it, the tile of the TabMania popup in TabMania was showing up without an icon
    (while for some reason the tile in Windows showed the icon anyway)

- NormalizedTabs::normalizeTab() needs a class-instance independent version of "this._err()"
  * Defined tmUtils.err() for that purpose

- Promoted deepCopy() and isEqual() to tmUtils, and added basic support for Arrays
  * Before they could only be used inside PersistentDict

- Now reusing tiles instead of just recreating them at every refresh
  * Not really a full-fledged cache of tiles, but close enough...

- Cleaned up NormalizedTabs.normalizeTab() to fully support tabs, rctabs, bmnodes

- Added prefix to rctab and bmnode IDs to avoid collisions with the numeric space of standard tab IDs.

- Added "state" describing all the rendering needs of a tile, to simplify comparing during update()
  to confirm there are or not real updates to make

- Cleaned up difference between rendering/updating tile body, and rendering/updating tile menu
  * They also get scheduled separately, and in different queues (tile body uses high/normal priorities,
    tile menu uses low priority)

- Make sure tile update() doesn't get fooled if a previous update() didn't complete because it scheduled
  the update, but then the AsyncQueue got discarded before it could take the action

- Cleaned up tab and bookmark menus update() function
  * They were not used before, but now that we reuse tiles, these update() function
    are a must have

- Re-render bookmark path if bookmark moves or its ancestors move

- BUG: when focusing a new window and selecting a different tab with the same click,
  you get both a "window-change" event and an "activated" event. Both add the previously
  active tab to _backTabs, but only one should. Very minor, we need to remove duplicates
  for other reasons anyway, but better to keep things clean.

- BUG: the Font Awesome 5.15.2 javascript slows down tremendously the rendering of TabMania
  when there are many tiles (testing with 700 tiles)... 3/4 of the total time was Font
  Awesome with its event listeners... we don't even diretly call a single FA API!!!
  * See "docs/21.03.03 - Font Awesome 5.15.2 performance issue" for details
  * This would not have been an issue in production, since we don't package Font Awesome
    files in production
  * Since we're not using it, why letting it be in the way

- Removed distinction between _searchRenderTabsInner_Merged() and _searchRenderTabsInner_Separate(),
  the results are always merged, if you want them separated the right way is to allow users
  to group results by source type (tabs, rcTabs, bmNodes, hItems)

- When switching from normal to search, we should take the scrollbar back to the top
  * Same probably when switching from search to search (change input)...

- When switching from search to normal, we should put the scrollbar back where it was
  before the search started

- Add support for history search
  * https://developer.chrome.com/docs/extensions/reference/history
  * Similar to bookmarks, with the advantage of offering a max-limit in the search API
  * This should probably be disabled by default

- Moved "recently closed tabs" (chrome.sessions) functions and events to the HistoryFinder class

- Initial support for context menus
  * Move current page to least tabbed window
  * Open link in least tabbed window
  * With selected text
    - Use launch/search shortcut
	- Use any custom shortcuts with search enabled

- Save size and position of undocked popup

- Make "undocked" the new default for the popup

- BUG: ".form-floating" doesn't seem to work
  * Needed to add a non-empty placeholder at all times

- Add title/name to shortcut keys, and use it in context menu

- BUG: need to consider multiple matches for chromeUtils.getLeastTabbedWindowId()

- Blink popup badge if a triggered action has no effect (e.g. "move to least tabbed window"
  but the tab is already in the least tabbed window)

- Listen to shortcut keys events and update shortcut keys context menus accordingly

- BUG: "move to least tabbed" context menu can't find the tab...

- Removed "Toggle play" menu item
  * Added temporarily to play around with it

- BUG: tiles dropdown menu stays open when clicking on a menu item
  * It might go away because you hover somewhere else, but when you hover back
    it's still open

- Add "move tab to least tabbed window" action to the tile dropdown menu

- Change the shortcut text "unset" to lighter gray, to show it's not set

- Link (click) shortcut text badges to extension shortcut config?

- Cleaned up debugging commands for Chrome dev tools console

- Changed "Discard from memory" menu item to "Suspend"
  * Also changed the search badge from "discarded" to "suspended"

- Remove "pin" menu for bookmarks if we don't implement it in this release

- Remove "Advanced mode" options

- BUG: every time the popup opens
  * popup.html:1 Error in event handler: TypeError: Cannot use 'in' operator to search for '1712' in null
    at Object._tabUpdatedCb (chrome-extension://flhpmmboiepkmkippdhjllnejfolajdb/popup/TabsTabViewer.js:399:14)
  * That's the tab ID of the popup

- Find a way to refresh shortcut text (no event for that)
  * Initially let's just register for Settings bsTab activation and shortcuts
    collapsible container expansion to let them trigger a rebuild of those
	shortcut texts
	- At least the user can do a Settings -> Home -> Settings to see the update,
	  instead of a close -> open popup...

- Using Chrome favicon cache for standard tabs too, as sometimes they're missing
  * Making sure that when a group has to pick a favIcon from one if its members,
    members with a real favIcon are prioitized over members pointing to the cache

- Added extended ID for browsing history items

- BUG: NormalizedTabs.formatExtendedId() uses tab.id for reTabs/BmNodes/hItems instead
  of using the available non-prefixed version (tab.sessionId/tab.bookmarkId/tab.historyId)

- Create a static response to chrome.tabs.query() to display some repeatable set
  of tiles when staging the TabMania popup for release screenshots

- Point users directly to https://github.com/marcodb26/TabMania#readme for documentation


DONE 1.0

- BUG: search should not be case sensitive

- Add badge to extension icon counting the total number of tabs

- BUG: creating new tab doesn't flash "Home" tab

- BUG: search doesn't autoupdate if an extra result becomes available
  (but it autoupdates if a result disappears, tried with SOPhI, which went through JIRA login)

- Included Font Awesome 5.15.2 from cdnjs.com (not through their "kit")

- Add count of search results somewhere

- Centered correctly the caret of the dropdown-toggle

- Rate-limit re-render (updated RecurringJob and renamed ScheduledJob)
  * Update tile immediately if full re-rendering is delayed

- Clean up tile logic to re-render only what's necessary when the corresponding
  tab has an update (re-render the content, not the skeleton)
  * Mostly making sure the dropdown toggle doesn't get re-rendered for every
    update, because that would cause open menus to disappear at random

- BUG: search for all the uses of setHtml() or ${html} and replace them with
  setText() if they're using text coming from outside sources (which could lead
  to HTML injection attacks)

- BUG: closing a tab from the popup sometimes causes the corresponding window to move
  to the foreground
  * When clicking the "x" icon of a tab in the popup, we should not let the click get
    to the default "bring to front" action, we need to stop the click notification
	from getting there

- Action menu actions

- Add back ability to click on title in menu to jump to tab

- Use chrome.tabs.discard() to discard a tab from memory (still reloadable)
  * Added as an advanced option in the tile dropdown menu

- Shortcuts to support clipboard search like omnibar (setting option). Need to be an
  explicit option because URLs might have %s
  * Shortcuts use hostname or URL
  * Shortcuts “open in new tab” option, otherwise open in new tab only if hostname
    not present (if open in new tab, open in new tab only if full url not present,
	or search enabled)
  * When hostname based, pick the left-most tab in the smallest window ID (that should
    persist across reboots), and allow other tabs to take that position as menu option

- Started supporting search by tile badges, still not working

- BUG: don't use CTRL + left/right arrow, as it competes with the standard word/by/word
  moving around

- Rename the keyboard shortcut commands to have a numeric value in front, to allow
  for proper sorting in the extensions shortcuts page (they're sorted alphabetically)

- Added tab index to "tab extended ID" badge/search

- Added ability to inject scripts in tabs via ChromeUtils

- Added retrieval of <meta> tags from all tabs (if they're loaded)

- BUG: the open/close state of the tiles group accordion
    doesn't get saved across popup restarts (it used to work...)

- BUG: tab info normalization happens only on query, it doesn't happen for "tab"
  info coming from update listeners

- The "tabs" received on a full query need to be "live" and updated every
  time a listener fires with a new tab information
  * The new tab object from an update should replace the tab object in the tabs array
    - That way, when tile rendering sets searchBadges, the search logic can
	  find the right badges

- Include tile badge keywords in search
  * If a tab has the badge "highlighted", allow to find it when searching "highlighted"

- Done some performance testing and updated some logic to improve rendering performance
  * Made tile body rendering async, so it starts happening after the loop that
    generates all the tiles skeletons and inserts them in the container
  * Moved all chrome.storage initialization to the beginning of time, before
    the window.onLoad event is triggered. Before we were trying to be clean
	and putting storage in the objects that need to use it, but that was adding
	extra serialization delays by having some data loaded first, dependency,
	then more data loaded later, other dependency
  * Attaching TabsTabViewer's top _containerViewer to TabsTabViewer's body
    at the end of the synchronous part of the tile rendering (attaching tiles
	while the container is not in the DOM speeds up rendering slightly)
  * Removed some unnecessary verbose logs from _getTabMetaTags()

- BUG: "home" tab only displays data if switching to another tab first...
  * Race condition discovered as a result of the performance improvements done today

- Added support for onAttached and onMoved events, to track tabs moving around,
  since that's affecting the candidate tab for custom shortcuts

- BUG: search doesn't auto-update when you add a new tab that matches
  * Repurposed "prop" notifications to fix this

- BUG: each "prop" notifications is generated multiple times if multiple "props" match,
  one per matching "prop"

- Change .createNew() back to .create()

- Implement shortcut actions ("set me as candidate tab for shortcut SCx")

- Show candidate tabs for shortcuts with grayed out badges, so you can search
  for all candidates by typing the shortcut "SCx" in the search box

- Changed PersistentDict to use "_id" as "_keyInStorage" (makes log messages a lot
  more readable)

- Implement "live sync" of chrome.storage.sync for SettingsStore
  * This is urgent now, otherwise when the user changes the shortcuts configuration
    in the popup, the background.js (which needs to operate the shortcut) won't be
	informed about the change

- BUG: tabs.js in the background page needs to call updateTabs() for the
  shortcutManager, to remain in sync with what the popup is displaying

- BUG: cleanup _queryTabsCount() and move settingsStore.getShortcutsManager().updateTabs(tabs);
  to a proper place (including getting continuous updates as all the tabs change,
  currently TabsManager is not listening to all tabs changes...

- Started decoupling background.js from the web monitoring files
  - Incomplete, more cleanup to do

- Added to Settings the tiles modifiers (advanced menu, show extended ID)

- Added to Settings customization of the search engine for the "clipboard launch/search" shortcut

- Added to Settings customization of the custom shortcuts

- Add link to keyboard shortcuts in settings
  * But it broke the next day with a Chrome update, not possible anymore

- Added to Settings information about whether Incognito access is granted or not

- Implemented EventManager based on DOM events

- BUG: tile menu gets rendered with tile skeleton, not with tile body (it
  doesn't get updated as users change Settings)

- Change group builder parser to concatenate regex with “or” operator

- Manage group settings

- Added production flag (visible in Settings menu)

- Added accordion for custom group and shortcut settings

- Use gray background for incognito tiles, and reversed color of menu and close icons

- Changed model for adding new custom groups, so that a full card is created
  immediately
  * It required supporting cards with no group name (a valid group name was
    required in the cards before this change)

- BUG: remove "No custom groups defined" message from custom groups inner
  container if we can't find an easy way to let it be in sync
  * The problem is that the container counts the number of .append() calls
    made, but nobody calls the container to update it when it calls .detach()
	on itself. To make things worse, one can simply work with the DOM regardless
	of the container, and it's impossible to keep it in sync...
	The only time that "Empty" message is accurate is before the first .append()...
	that's good enough for the tiles view (given the continuous full re-query/re-render
	cycles), but doesn't work for something more dynamic like the custom group cards
  * Fixed by forcing calls to clear() in the container when it's supposed to be empty

- Automatically give focus to the group name input when creating a new card

- Completed syncing of color info from custom group settings

- Disabled color radios when a custom group has no name

- Allow users to specify custom groups hostnames as regular text, not
  standard regex

- Publish on github 

- Add copyright header to files
  * Per github convention, added info only in LICENSE file

- BUG: accordion tiles don't remain open anymore

- BUG: TabsTabViewer enter search mode when typing in an <input> of SettingsTabViewer.
  This should not happen, what happens in SettingsTabViewer stays in SettingsTabViewer.

- BUG: GroupsBuilder was triggering an update even when the changed key was not "customGroups"

- Reduced number of unnecessary settings refreshes. Each settings viewer now listens only
  to changes for a specific event "key"

- If you reload a window that's in search results based on search
  badges (e.g., search for "sc2", the shortcut), all tabs disappear from the
  search results, because we trigger a full re-query/re-render and therefore
  no tabs have the search badges when the re-render starts
  * We definitely need to move the prep for the search badges to the normalization
    stage. That would easily solve this problem. We'll need to address the challenge
    we had that during normalization some of the things we need in the badges won't
    be knowable (custom shortcuts?), but the normalization step is currently very fast
    (less than 5ms with 199 tabs per the latest performance measurements), so we can
    afford to spend a few extra cycles to update those (and the shortcuts info gets
    built very fast, less than 1ms).

- Include special attributes that don't have a badge in search badges
  * E.g. "unloaded" is visualized with visual clues other than a badge, but we should
    be able to find it by typing "unloaded"
  * Possible candidates: "unloaded", "unpinned"
  * Fix note: unfortunately "loaded" is a substring of "unloaded", so now when we search
    for "loaded" it matches both "loaded" and "unloaded", making it impossible to search
	only for "loaded" things...

- Added more search badges, switched to use "active" instead of "highlighted", and translated
  the hidden status "complete" to "loaded" for UX-friendly symmetry with "unloaded"

- BUG: unfortunately "loaded" is a substring of "unloaded", so now when we search
  for "loaded" it matches both "loaded" and "unloaded", making it impossible to search
  only for "loaded" things...
  * Implemented special characters at the beginning of the search string:
    - "^": regex-like syntax to indicate "search strings starting with",
	- "!": negation, indicating to match tabs that don't contain the search string
	- "!^": negation of regex-like syntax, that is, "search strings not starting with"
    - E.g. "^loaded" matches only "loaded" and not "unloaded" hidden badges

- Added tmStats() to be called directly from the Chrome devtools console of the popup

- BUG: "active" badge doesn't get removed from tab in search result when a different
  tab becomes active

- Added icons for audible and muted

- Added "mute/unmute" menu item

- Cleaned up use of Font Awesome icons

- Removed the logic that tried to avoid unnecessary re-query/re-render cycles, as it was
  too brittle due to the issues with the lack of info in the Chrome tab events
  * Now full refreshes occur for every event, with a little 200ms rate-limit, and
    we should be done with things not updating in search mode

- Remove "https://" from URL displayed in tiles (but only "https://", leave any
  other protocol visible, matching what Chrome does in the omnibar)

- Added "highlight / remove-highlight" menu item
  * Decided to avoid calling it "select/unselect" because we want to support tiles
    selection later, and that's a different thing

- Don't try to render space for favicon if a favicon is not available

- Include custom group names (non-hostname) in search badges, and possibly in badges
  too while in search mode (while not in search mode there's no reason to do that
  since all tiles are grouped under the group name)

- Color badges from custom groups (not very useful when inside the groups, but possibly
  useful when the tile is in a search result)

- Workaround for Chrome bug: chrome.window.onFocusChange doesn't fire when switching from
  a Chrome window to the window of another application
  * Need to fix it for the "back" command to work properly when switching back from another
    app to the last opened Chrome tab

- BUG: "back" needs to support the "global" case, and in that case just bring up
  the Chrome window and stay on the same tab (like it happens when "back" from a
  "-1" window)
  * It worked out of the box after the workaround for the Chrome bug...

- BUG: when creating a new custom group, the tabs re-query re-render doesn't
  seem to get triggered automatically

- BUG: custom group container tile doesn't update color callout when color changed
  * The tiles inside the container do change color...

- Explicitly show badge for custom group (colored?)

- BUG: Custom groups with pinned tabs don't get pushed to the top, they
  follow standard sorting
  * Hostname-based groups get pushed to the top instead

- BUG: Since 2021.02.05, access to "chrome://" URLs seems to be prevented from
  within the popup, and the links in Settings are dead
  * The error message in the console is "Not allowed to load local resource"
  * https://chromereleases.googleblog.com/
  * https://www.theverge.com/2021/2/5/22267872/chrome-88-zero-day-vulnerability-government-backed-hackers-security-researchers

- Added thumbtack icon and removed badge for "pinned"

- Remove visible badge for "discarded" (it's just confusing, too similar to "unloaded")

- Made pinning configurable for custom groups

- Increased vertical size of container tiles, to be closer to the size of tab tiles

- Added thumbtack to container tiles
  * Black if the group is pinned, gray if one of the tiles inside is pinned
  * No need to worry about Incognito color inversion, custom group accordion
    headers are never dark, even if they only contain incognito tabs
  * Restructured TabsTabViewer.js (extracted class TilesGroupViewer) in preparation
    for supporting more decorations of the container tiles

- Improved rendering of badges when some badges are too long (the name of the custom
  groups have no length limits, and they show up in badges)

- Figured out how to center the "x" button to close tiles and delete custom groups

- Changed Github repository name to TabMania and updated local repo to https://github.com/marcodb26/TabMania.git
  * git remote set-url origin https://github.com/marcodb26/TabMania.git

- Completed documentation for v1.0

- Cleaned up prod vs. dev selection, by adding a prod.js to be included only in prod builds

- Started documenting release process and steps
  * Added some scripts to the NPM's package.json

- Manually populated /dist directory for 1.0 release
  * We'll worry about automating the build later...

- BUG: uninitialized "options" PersistentDict leads to showing extTabId badge (it shouldn't)

- BUG: User input validation logic puts an _err() on the console when a user input is
  validated as invalid

- Moved the documentation for developers to README-DEV.md

- Prepping for publishing
  * Removed host permissions and meta tag retrieval until we have a real use for it
  * Removed "activeTab" permission as it doesn't seem to be needed...
    - We wanted to use it to take a screenshot of the active tab, but probably no reason
	  to do that anymore
  * Using a local copy of Bootstrap (instead of getting the code from a CDN) to avoid the
    'are you using remote code?' scrutiny in the Chrome Web Store
