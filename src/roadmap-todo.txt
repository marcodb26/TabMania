TODO 2.0

- Cleanup pin inheritance to avoid the ugly check "window.bookmarksManager == null"
  in NormalizedTabs.js to check if the code is running in the background page

- BUG: hostname-based groups have empty titles when grouping file:///C:/...

- BUG: can't use tile contextMenu while wantsAttention is active
  * The tile closes the context menu again every time there's a title update

- BUG: open in least tabbed doesn't work from OneNote
  * Probably just a fluke since there was a bug in NormalizedTabs.js for the background page

- Let NormalizedTabs remember the last title in "loaded" state while the tab is in
  loading state
  * Then sort based on "last title" if the tab is in "loading" state

- Test _queryCycleNo

- popup/TabsManager.js must generate updates also when pinned bookmarks get updated
  * How do we do that? We only compare _normTabs, which doesn't include _filteredPinnedBookmarks
    - Who manages diffs for _filteredPinnedBookmarks?

- Some customGroup changes affect TabsManager (different search badges on a tile), some
  other affect only rendering (different color for a custom group)
  * We should make sure each class (TabsManager and TabsBsTabViewer) only react for the
    properties they care about

- BUG: empty hostname in custom group attracts all tabs
  * Create a custom group
  * Add a hostname
  * Remove the hostname
    - All tabs now match the custom group

- customGroup color doesn't get updated in left-border of tiles (only in group title
  and in badge)
  * The problem is that tiles are cached, but customGroup color is not part of the
    tile rendering state, so we don't notice the change
	- Need to make the customGroup color part of the rendering state
	- But then, why does the badge color get updated???

- BUG: If customGroup has "bg-light" color, the text must use a dark color, otherwise it's
  invisible

- Use chrome.windows.update "drawAttention" flag?

- When opening a new tab with a URL, intercept the tab creation and determine if the
  URL is already opened in another tab, in which case activate that tab
  * Track the first "onUpdated" if the URL is not available in the "onCreated"
  * Any way to disable this feature by pressing a key while the tab is being created???

- Background page normalizeAll:
  * NormalizedTabs.js:688 [47] NormalizedTabs::normalizeAll(): found tab in loading status
  * Don't run the loading workaround logic in the background page

- BUG: after opening the popup, it takes long before the dropdown menus start showing up,
  especially for tabs below the top


PREP FOR NEXT RELEASE

- Remove all injection code in preparation for release (again)

- Disable Base._assert() for production code


PUNTED TO NEXT RELEASE

- Can't search for "real tabs" except by negating badges "bookmark", "closed" and "history"
  * It would be best to have a positive search badge to only include "real tabs"

- Create default custom groups to advertise the feature
  * Complexity: these default groups should be set up the first time the user installs
    the product, and possibly reinstalled upon "reset", but otherwise should not interfere
	with configuration changes made by end users 
	- E.g. have a flag in configuration that gets set and disallows regenerating that
	  config at boot time
  * Default groups
    - New tabs (empty)
	- Search (google and friends (which friends?))

- Monitor new tabs being created, and if a tab that's like an existing tab gets created,
  automatically close the new tab and move to the foreground the existing tab

- Move to manifest v3 and implement reading clipboard by leveraging the popup?
  * Force opening the popup if it's closed (then leave it open)

- Add buttons on top and bottom of visible tiles area when the scrollbars are shrunk (narrow view)

- Generate OS notification when tab wants attention

- Now that we show bookmark folders in the tile, should standard search account for folders too without
  specifying the "folder:" modifier?

- Menu item to move all tabs in a custom group to the same window

- BUG: "Remove highlight" dropdown menu should be disabled on an "active" tab if
  the active tab is also the only highlighted tab in the window
  * See TabTileMenuViewer._initMenuItems() for a comment describing the issue
    in more details
  * This requires tracking the count of highlighted tabs in each window, outside
    the menu rendering logic of each individual tile

- BUG:
	  GroupsBuilder.js:182 [52] GroupsBuilder::_groupByCriterion(): unable to generate key for tab
	  {active: true, audible: false, autoDiscardable: true, discarded: false, groupId: -1, …}
	  active: true,
	  audible: false,
	  autoDiscardable: true,
	  discarded: false,
	  favIconUrl: "chrome://favicon/size/16@1x/",
	  groupId: -1,
	  height: 607,
	  highlighted: true,
	  id: 1950,
	  incognito: false,
	  index: 47,
	  mutedInfo: {muted: false},
	  openerTabId: 1947,
	  pinned: false,
	  selected: true,
	  status: "complete",
	  title: "",
	  tm: {type: "tab", url: "", protocol: null, hostname: null, customGroupName: null, …},
	  url: "",
	  width: 1248,
	  windowId: 396,
		(anonymous) @ GroupsBuilder.js:182
		_groupByCriterion @ GroupsBuilder.js:177
		groupByHostname @ GroupsBuilder.js:287
		_standardRenderTabs @ TabsBsTabViewer.js:988
		(anonymous) @ TabsBsTabViewer.js:956
		Promise.then (async)
		_queryAndRenderTabs @ TabsBsTabViewer.js:887
		run @ ScheduledJob.js:64
		_tabCreatedCb @ TabsBsTabViewer.js:318
  * The real question is, why would a tab have both URL and title set to ""?
    - We could turn that this._err() into a this._log(), but it's not clear why this is happening,
	  let's keep monitoring it
	- Note that I had at least 5 or 6 such messages on the console, not just one

- Show button to move back to top when a tab wants attention
  * The tile moves to the top, but the user might not be at the top

- Render contents of dropdown menus only when they hover visible
  * Or even when the user clicks the hovered button?
  * Or when she hovers on the dropdown button itself (but before clicking)

- Sorting tiles, add secondary criteria
  * If two tabs have the same title, sort by url
  * Same URL, sort by index in window (to match their appearance on chrome)
  * Any other sorting criteria besides "title" and "url"?

- Multi-select of tiles to take actions on selection
  * We'd need to stop updating the tiles list during selection

- Add action menu to containers

- Change rendering of custom group configuration by showing one hostname per input box,
  and support "-" to indicate exclusion
  * Then implement search by running a search query in custom group

- Improve displaying of hostnames in custom groups configuration
  * Instead of a text area, list each hostname as their own input box, with options to
    delete or disable
	- Plus a button to add a line
  * Internally they can still be stored as a long string (?)
    - Prepend a line with a comment ("//") to identify lines that are disabled
	  * Or should we support real comments, in which case we might need a special prefix
	    for lines that are disabled

- Do we need to support search as a textarea instead of an input box?

- Add more shortcut keypresses (SC6-SC10?)

- Suspend tiles refresh when displaying menu items
  * Especially at brwser startup time, there are lots of refreshes, and they cause
    the menu dropdown and the "x" clse button to disappear
  * If you're unlucky, you press the "x" button right after it's gone and you end
    up taking the tab to the fore instead
  * Not sure this is a good idea, what if one stays with the mouse on a tile forever?
    No refreshes ever again?

- Continue testing with search query: site:mail.google.com and ---inurl:site:google.com or site:amazon.com

- Add shortcut title to dropdown menu of tabs
  * We use the "shortcut title" in context menus, should we also use it in the tile
    dropdown (maybe as a subtitle?) to tell the user what that "SC2" badge means?

- BUG: while testing production, "Open in least tabbed window" chose a window with
  more tabs than the one where the parent tab was
  * Need to check what happens if calling "Open in least tabbed window" while on
    the least tab window (with a lot less tabs than the next tabbed window)
  * Also, the bug happened when clicking on a link for a tab that had just been
    moved to the least tabbed window

- Decouple shortcut keypress from shortcut menu item
  * The shortcut configuration should allow remapping of existing known keypresses to
    specific shortcut configurations, and leave ohter shortcuts without a keypress
	and available only in context menus

- BUG: If searchbox has too much text and ends with a whitespace, when you move the
  cursor to the end of the string (after the last whitespace), the cursor disappears
  * No way to play with margins because of the "::after" element for the "x"

- Add a star to a tile if it's bookmarked
  * We must do this asynchronously, we can't wait for all these bookmark searches
    to go through after every tab query
    - Do it directly in the tile?
	  * We should do it only when the tile becomes visible in the scrolling

- Find a way to remove the touch-hold "hover" state of a tile
  * When you touch-hold, Chrome simulates a "pointerover"/"mouseover" that triggers the
    :hover CSS pseudo-class, but there's no way to get out of that state

- Support "undo" for deleted bookmarks
  * Can we also "undo" deleted browsing history items?

- Add back this._getTabMetaTags() to TabTileViewer::_renderBody()
  * And add back host permission "*://*/*" to allow the code injection to run properly

- Toggle window open/minimized when clicking a tab tile
  * How do we find out a window needs to be minimized?
    - When we click the tile, the window can never be in foreground, the TabMania
	  popup is in foreground
	  * How do we distinguish a window that needs to be taken to foreground from a
	    window that needs to be minimized?

- Auto-select-all in searchbox when user clicks the mouse there to edit

- Search: how does the new multi-token model work with history?
  * Do we need the simplified query string (purged of operators?) to pass to HistoryFinder?

- Improve performance of this._normTabs.getTabByTabId()
  * We should add a side dictionary structure to get tabId
    - We should not always have to do linear searches...

- Add logic to let "www.google.com" be recognized as a valid URL, even though new URL()
  won't consider it valid
  * Make it behave like the browser's omnibar...

- Support merging the tabs of two windows

- Re-merge the normalizeTab() for tabs and bookmarks
  * We've seen too many search bugs due to discrepancies in the treatment of bookmarks vs. tabs

- Add option to control whether a pinned bookmark should be an exact match or a prefix match
  for the URL of an open tab
  * Right now we match a prefix
  * Pinned bookmark option (?), can't be a global option

- Interrupt updates if the pointer is on the "Close" button of a tile
  * It's happened a couple of times that I was trying to close a tab from the tile, and
    instead I brought the tab to the foreground
	- Users won't understand that this is happening because there was an update that
	  caused the tile to be re-added, and therefore the "Close" button disappeared
	  for a little while
	  * Do it only while the cursor is exactly on the "close" button
	    - Hovering on the tile should not be enough
		- What timeout can we apply? If the user forgets the mouse there, will we never
		  ever update again?

- BUG: search a single letter ("a"), get 1,100 results, then scroll to the bottom
  * Focus on a window and change active tab
    - The search count badge blinks, then stops blinking, everything is visible
  * Repeat the same but this time close a tab
    - The search count badge blinks, but when it stops, all tiles at the bottom
	  become whilte, and remain white for a while before getting re-rendered
	  * What's the difference between changing active tab and closing a tab???

- When text is selected, update context menu to show the text that will be searched
  * Use getSelection() and event selectionchange
    - To generate event to update context menus in active tab
      https://stackoverflow.com/questions/5379120/get-the-highlighted-selected-text
      https://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange_event

- Context menu "Open in least tabbed" should directly try to tell if the link is already
  open (is that even possible???)
  * Can an extension customize its menu before the item gets clicked?
    - Is there a "page right click" handler for a specific page to update the menu when the
	  right click happens?
	- Would https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event work?

- Group tabs with same title and same URL to show as a single collapsed tile with a count
  * Support expansion (persisted)
  * Include corresponding bookmarks in group (match only by URL for bookmarks, since they might have a title out of sync)
  * This should be done for all modes (standard and search), maybe in different stages, because otherwise search can never use the flat rendering

- Expand/collapse all groups (popup menu item)

- Group/ungroup all groups (popup menu items)
  * In search, allow also to "group by source" (tabs, rcTabs, bmNodes, hItems)
  * Group by window

- Organize groups by host name inside top level groups (second level)
  * With group/ungroup option for each top level group

- TabsBsTabViewer needs a more precise caching mechanism for tile viewers
  * Right now we discard any tile that's not used in the current rendering iteration
  * This means that if you search and find 1,000 bookmarks, then get out of search, the
    tiles of those bookmarks will be discarded, and not available the next time you
	search again
  * A proper cache would let those bookmark tiles expire after a certain amount of time
    instead of dropping them immediately

- Try again to prioritize tile rendering based on being visible on the screen

- If a tile is inside a group accordion, and the accordion is closed, put the tile in
  the low priority queue for rendering

- Add spinner to unrendered tile body to let users know it's coming...

- Instead of setting an arbitrary "3em" for the min-height of tiles, we should add some
  code to measure the height of a populated tile right after startup, then use that exact
  value for the empty tile body from that point on
  * Tiles might measure different amounts for different users, but once a session has
    started, the tabs should not change size for the duration of that session

- Add tab count badge to "Home" bstab
  * Maybe only when it's undocked? It's redundant when docked

- Add in settings total count of tabs and bookmarks
  * Don’t exclude folders when counting bookmarks, too expensive
  * Use pulseBadge class while recalculating values
  * Calculate values only when user on settings tab (otherwise just mark them as dirty and wait for settings tab to be in focus before you recalculate)

- Search optimization: rebalance the sorting order of operands at each operator level
  based on how often they're the deciding factor for past tabs
  * If an operand wins/loses a tab, +1 his count of successes, and propagate/accumulate the count
    up to all its chain of operators
	- For each level where count changed, compare operand count with previous operand count,
	  the biggest count should always be on the left of the list of operands (evaluated first)
	  * We probably don't need to re-sort the entire tree, we could just take a single step
	    per tab evaluation, and eventually we should get to the most successful nodes on the
		left of their operand list
  * This rebalancing is especially useful because every time there is a change we need to
    reevaluate everything, but only a small subset of things have changed, so it's likely the
	parse tree is still balanced for the minimum number of nodes evaluated when the next
	full tabs evaluation happens

- Optimization: “(abc or def or ghi) and -ab” should be equivalent to
  * “(abc or def or ghi) and -ab” ==> "FALSE OR (def AND -ab) OR (ghi AND -ab)" ==>
    "(def AND -ab) OR (ghi AND -ab)" ==> "(def OR ghi) AND -ab"

- Replace AND with positive lookahead in regex?
  * https://stackoverflow.com/questions/3041320/regex-and-operator
  * A bit dangerous without knowing the performance impact of positive lookahead...

- BUG: the search text inurl:chrome:// does not turn "chrome://" into a regex, why?
  * This is nitpicking, but I though we would always convert OR strings (even standalone)
    into regex, so why not simple strings without an OR operator?

- Update custom group by re-running the parser and taking the minimal parentheses version (without optimizations)

- Remove duplication in search evaluation functions between text and regex test

- Custom groups: if a site is part of two custom groups, list both badges
  * Though we still need to pick a "primary" custom group for the left border badge

- Custom groups: support temporarily disable some hostnames in custom groups
  * Support comments in custom group definitions for that?

- Track custom group configuration history to allow users to go back after they make changes
  (track it in the background page)
  * Especially important once we allow users to add a site from a menu, e.g. you had mail.google.com,
    you add google.com, at that point mail.google.com disappears, how does a user remember what
	she had before?

- Context menu (on page) and dropdown menu (on tab) to add hostname to a custom group

- In dropdown menu, decide whether or not to show the “add site to custom group” based on the fact that
  the search query rebuilt changes or not
  * This makes rendering of dropdown menu very slow, so do it only on hover, don’t render immediately
    when tiles are rendered

- In dropdown menu, add support for removing a site from custom group, implemented as “and not site...”

- Priority field in custom groups

- BUG: Class .tm-dropdown-menu says "min-width: 20em", causing the popup to have
  a horizontal scroller when the popup width is less than 20em
  - We need to replace that with a more dynamic setting
  - It's also exacerbated by the fact that the menu doesn't close when you
    remove the hover, so the scrollbar stays even though the menu is not visible
	* Maybe we just want to fix this and live with a menu that's too big just
	  when you open it?
	  - There's no point in making a menu too narrow, ideally it should show up
	    outside of the popup window...

- Figure out a way to open the TabMania popup if it's closed when the user uses
  the "Search tabs with TabMania" context menu item

- Add a global shortcut to bring the undocked TabMania popup to the front or open
  it if it's closed
  * This is already possible with the standard "invoke popup" shortcut, but that shortcut
    is restricted to work only in "Chrome" scope, and we want to have an alternative for
	global scope when the popup is undocked

- Manage incognito tabs (same view, different BS-tab, hide, etc)

- Update ScheduledJob to not only wait for the timer event, but also for other events
  the job needs to have satisfied in order to run.
  * See the comments before BookmarksManager._applySettingsChangeDelay to get an idea of
    the problem.
  * The "other events" should be either Promises that are known when the job gets
    scheduled, or Promises that become known when the job is expected to start running.
    - Any other call to schedule a new job should find the current job still pending
	  (technically never started) and rely on that same job instead of scheduling a new one

- Add badge "recent" to the last 10-15 visited tabs
  * Independent of the "active" badge
  * We thought we should use the TabsManager back/fwd history, but it would make more sense
    to actually measure how much time the user spends with a window in focus and a tab active,
	across every tab/window transition, then get the most recent from there
  * To implement "recent" tabs, start with TabsManager::_notifyPopup()

- Shortcuts1-5 with option to select incognito tabs
  * If not selected, ignore incognito tabs

- Time slice settings (fixed or relative times), just do fixed times for now

- BUG: the chrome.history.search API is tricky... if I search for "Los a" it finds
  history of visits to the "Los Angeles Public Library", but if I search for "Los an"
  those results disappear
  * We've seen similar problems with "Go" generating less results than "Goo"
    - While both should capture "Google", and definitely a shorter query should
	  generate more results, not less

- To improve on the update of custom shortcuts text, we could trigger an update to the
  custom shortcuts text badge every time the user focuses on the TabMania popup (for
  undocked, need to find the equivalent for docked), since in order to change the shortcuts
  the user needs to go to the extension page
  * To make it less frequent, we could monitor that the previous tab in focus before the
    popup was the extensions/shortcuts tab
	- But the user could have closed it, or could have navigated through other tabs,
	  or could have used the extensions/shortcuts tab to load other stuff
  * "When the popup gets focused" seems to be the only reliable way to trigger the check
    - Event initiated from background.js, since background.js knows

- Option to find URLs open in multiple tabs (deduplicate)

- When clicking on the "shortcut text" in the shortcut settings, we open the Chrome page for
  extension shortcuts settings in a new window with every click
  * We should first try to find if the page is already opened instead, and reuse it
  * This might disrupt the docked popup (we didn't want anything to happen to the
    window where the popup is opened, that's why we chose the "always new window"
	behavior)
    - But nowadays the undocked is the better version, and it doesn't suffer this problem
	- Maybe we can at least choose the better behavior only when undocked, and revert
	  to "always open new in new window, never reuse" when docked

- Menu action to re-sync bookmark title if a corresponding tab is open and its title doesn’t match(?)

- BUG: now that we have a way to persist the popup beyond the life of a tab/window,
  we're starting to see race conditions we did not see before:
  * [2] ChomeUtils::inject(695): unknown error: No tab with id: 695.
  * It looks like when we close a tab, we might still have it for a while and try to
    inject scripts into it
	- As a minimum we should suppress this error, but better trying to figure out
	  why we have this race, I thought we injected only on full refresh?
	  * Probably we inject also on single-tab update, but why would we get an
	    update for a tab that's been closed?
	  * And why was this not happening with docked popup when closing a tab from
	    within the popup?
  * At the end of the 1.1 development, unable to reproduce this issue

- Limit maximum number of tabs in a window
  * To be used with the "least tabbed window" logic to decide to open a new tab in a
    new window
  * Should we dynamically apply it to tabs created via Chrome too?
    - It might not be too bad to see a tab show up in a window, then move in another,
	  as long as we follow it (?)
	  * But what about the "open in a new tab" cases, the user is not following immediately,
	    and when she tries to go there, they're gone from that window

- Create subsystem to monitor which tiles are currently visible
  * This will be useful later to perform more complex computations only on visible tabs

- Create a small always-on-top notification with the list of pinned tabs (icons only)?
  * Similar to Windows tray

- BUG: creating a custom group with just name and no other settings leads to no group
  displayed
  * Sequence
    - First create a group A with some properties
	- Then create a group B with only a name
	- Now delete the group A
	- Close the popup and reopen it, group B is gone, but its name can't be reassigned
	  to another group
	- Eventually group B shows up again (weird)
  * Towards the end of 1.1, can't reproduce anymore

- BUG: wantsAttention pulsating icon not pulsating when throbber active
  * But it should never activate when the throbber is active, so this is only an
    artificial condition

- Should the wantsAttention logic only get activated when the tile is not loading?

- BUG: chrome.tabs.update(tabId, { url: url }) loads a new "url" but sometimes replaces the
  existing URL instead of adding it to the tab navigation history
  * Apparently Firefox has a "loadReplace" parameter exactly to control this behavior
    (replace or add to history), but Chrome doesn't support that option:
	https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/update
	https://developer.chrome.com/docs/extensions/reference/tabs/#method-update
  * Noting this peculiar behavior here, but there's nothing I can do about it...
    * Note also the behavior is not consistent, not clear when it replaces and
	  when it adds to navigation
  * Use a search shortcut to try it out

- Do we need a different icon for the "launch/search" behavior of the "Open new
  tab" button?

- Filter out of the the back/fwd history the tab about the undocked popup
  * This should probably be a configurable option

- Change the icon of the extension popup to red in dev mode when there's a this._err()
  or a console.error()
  * And send all errors also to the background page! (otherwise they get lost when the
    popup gets closed)

- Find a way to support autocomplete for the search input (a.k.a. "remember recent searches")
  * https://stackoverflow.com/questions/15462991/trigger-autocomplete-without-submitting-a-form
    - The HTML5 <input autocomplete="On"> only works if you
	  * Give a fixed ID to the input field (we might need changes to make that happen)
	  * Force a real form submission
  * Alternatively, find a library to do something custom with it...

- BUG: if a group has a long name and it's pinned, its thumbtack is slighty off
  to the right compared to the other pinned groups/tiles around it

- Display <meta> tag information in dropdown, under title
  * Only "description"? Or also "image" when available?

- Reorganize TabsBsTabViewer to leverage a separate "TabsSet" object to manage the querying
  and maintenance of tabs subsets (instead of spreading that logic within the class code
  * One such object for the standard view, one for the search view, in future possibly
    one separate object for the incognito view (which needs to behave like standard view,
	but on a different subset of tabs)

- For bookmarks in search results, do we care to allow users to choose to reopen existing
  vs. always open new tab when they click on a bookmark?
  * We offer that option for custom shortcuts...
  * To implement this option, we'd need to offer back a menu button in bookmark tiles,
    with the two options

- Track and visualize time spent on each active tab (while the window is in foreground)

- BUG: what's wrong with the "CTRL+SHIFT+5" shortcut? If you set this key combo on a shortcut,
  the shortcut becomes dead and doesn't arrive to the background page anymore
  * Then you change it, the shortcut is still dead until you reload the extension
  * As of 21.03.09 it seems to be working fine again

- Remove from SettingsStore.js the stuff that doesn't belong there
  * See comment at top of file. Dose background.js really need the
    "NormalizedTabs" class or the "ShortcutManager" class?
	- Yes to both (see TabsManager)

- BUG: when closing and reopening docked popup, the scroll goes back to the top, we should
  remember the scrolling position when the popup was closed
  * Or should "go back to top" be expected to be the right behavior?

- Create new window event to attach more bstabs later (the event fires when the basic skeleton is
  ready to accept bstabs insertion), so we can cut the “global” tab from first release but keep
  its insertion functional without touching popuptabs
  * Actually maybe best to just add a "register" to push all the plugins that want to be attached,
    so they can push in the order in which they want to be attached

- Use chrome.tabs.captureVisibleTab() to capture a screenshot of the tab
  * Works only when the tab is active

- Keyboard navigation through tiles

- Boot-up performance: can we make the tiles appear faster?
  * Are the 4 shortcuts in 4 different chrome.storage.sync variables causing a delay?
  * Should we decouple the rendering that depends on settings from the rendering that
    doesn't to speed up settings-independent rendering in parallel with loading settings?
	- It looks like "window.onLoad" takes longer than loading settings (and they happen
	  in parallel), so we can't get any value from this, since we must wait for
	  "window.onLoad"
  * Render tile menus only when users click on it, or when they hover long enough on
    the tile to show the menu dropdown toggle?
	- https://davidwalsh.name/css-animation-callback
	- To trigger creation of a menu when the dropdown toggle shows up (delayed by CSS rules),
      instead of creating the menu immediately when the tile is being rendered
	- Probably not as useful now that we have async rendering of tiles body, but
	  it might still help by reducing the cost of these async tasks (and therefore
	  freeing up cycles to do something else that currently would be waiting)
  * This is now mitigated by the availability of an undocked popup

- Undocked popup always on top of other windows
  * Currently Chrome doesn't have such an API

- Implement https://developer.chrome.com/docs/extensions/reference/runtime/#event-onUpdateAvailable
  to force an update of the extension for users that never close their browser
  * Maybe offer the option to update in the "Settings" menu?

- Contact this guy to review my extension
  * https://www.computerworld.com/article/3535189/chrome-tab-switcher.html

- Find a notification to update in real-time when the user changes isAllowedIncognitoAccess()
  * This notification doesn't seem to exist today
  * Should we poll?
  * Probably not really needed, when the user makes the incognito change, the popup gets automatically
    closed by Chrome (even if undocked!)

- When a tab has a load error (which prevents injection of inject-getMeta.js)
  display a special error icon to identify the tab failed to load (e.g. because
  of network down) (search "network down" in the code to find the place where
  this check is made)

- Implement TileMenuViewer._updateShortcutMenuItems()
  * Or do we really care, given that most of the times we need to rebuild the
    entire set of tabs from scratch

- BUG: for docked popup, between the scrollbar on the right and the extension border you
  can see a bit of background, you shouldn't see it
  * See for example the screenshot used to publish the extension
  * Tried to set the <body> color to black, and that tiny strip next to the scrollbar
    is still transparent
	- It seems to be an issue with the scrollbar itself, not sure how to fix it, maybe
	  it will go away when we replace/remove the scrollbar

- BUG: When opening the undocked popup, the tiles rendering always happens twice: first
  because we opened it and queried for all tabs, second because we received a notification
  that our own popup tab went from status "loading" to status "loaded".
  * It's annoying to have to render twice, and slows down the startup of the undocked
    popup, but unless we find a good way to avoid full re-render when this event arrives,
	we need the event
  * We tried to suppress all events from our own popup, we ended up with a tile for the
    popup that was showing "loading" until another unrelated event cleared it

- Find a good way to manage console.log() in injected files (leveraging lib/prod.js)
  * Then add lib/prod.js to the "npm run inject" script

- BUG: the popup icon badge shows the wrong count when entering search mode, it
  seems to be getting updated to the number of tabs in the search results...

- "Candidate tabs" behavior should apply also for hostnames and URLs not in "search mode"
  ("useClipboard")

- Fix the domElem.addEventListener(event, fn, true), sometimes we say "true", sometimes
  we say "false", can we do it more accurately than random?

- BUG: console.log() and console.info() are the same thing in Chrome,
  so our functions this._log() and this._log.info() are the same thing...
  maybe we should use console.debug() as this._log()?
  * With or without renaming this._log()?

- Work with tab groups, introduced by Chrome in 2020
  * https://dev.to/otomer/google-chrome-s-new-update-finally-allows-you-to-organize-tabs-easily-this-is-how-you-can-use-it-3f99
  * Note that tab groups only work within a window
  * Unclear how to query for group properties (name and color)
	- Still work in progress, see here for updates: https://bugs.chromium.org/p/chromium/issues/detail?id=1106846
	- There should soon be a chrome.tabGroups API
	- Actually it's here: https://developer.chrome.com/docs/extensions/reference/tabGroups/
	  * But only available to the dev channel as of 21.01.24

- Stop querying chrome.tabs.query in the popup, and do the querying only in the background
  * The background should manage the "normalization" step too, and just notify the
    popup with the pre-normalized tabs list
	- This should save some time at popup opening time, since the popup won't have
	  to manage the query and normalization
    - Even if it doesn't save visible time, it will still reduce the amount of processing
	  caused by the popups, since eahc popup needs to query/normalize independently
	  * The only side effect is that the background might have to do this at all
	    times, even when no popup is open, but it already has to do that, in order
		to manage correctly the custom shortcuts

- Support contextual identities
  * Currently only implemented in Firefox
    * Chrome has "profiles", but they don't seem to be the same thing
  * See https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Work_with_contextual_identities

- Support Chrome Profiles
  * https://developer.chrome.com/docs/extensions/reference/identity/#method-getProfileUserInfo
  * Not sure if there's much to do with this API...
  * An extension is installed within the context of a profile, so it doesn't have access to
    data from other profiles
	- Every profile needs to re-install the extension if they want it

- Move to manifest v3 for tabgroups
  * Can't do this until clipboard-read is supported with service workers in manifest v3
    - See https://bugs.chromium.org/p/chromium/issues/detail?id=1160302
	- See also https://groups.google.com/a/chromium.org/g/chromium-extensions/c/GD59r-FOeuQ
  * Maybe more important, can't do it until the "chrome://favicon/" permission issue has
    been addressed
	- Chrome refuses to load "host_permissions": [ "chrome://favicon/" ], and there's supposed
	  to be a new "chrome.favicon" API, but it's nowhere to be seen... :-|
    - See https://stackoverflow.com/questions/65846725/i-cant-find-any-documentation-for-chrome-favicon-api
  * Another difference: manifest v3 doesn't seem to offer the "CTRL+ALT+ARROW UP" shortcut to
    open the popup (docked or undocked)
  * To switch back to manifest v3 later:
    - Edit chromeUtils.js and switch the "bAction" property to point to "chrome.action"
	- Edit build-dev.sh and build-dist.sh to generate manifest.json from manifest-v3.json.ejs
	- Use the isBg() function from backgroundLoader.js.ejs to conditionally remove access to DOM
	  (that is "document" variable) in classes shared between background and popup
	  * For example, the class EventManager needs to have that check
	- Remember that backgroundLoader.js.ejs also redefines "window" to "WorkerGlobalScope.self"
	  to keep some basic read-only variables from breaking at definition time
	  * Eventually we should change that model and avoid having to create a dummy "window"

- Display details about video
  * For Zoom video playback, you can use:
	"-webkit-media-controls-timeline"
	<input type="range" step="any" pseudo="-webkit-media-controls-timeline" max="2733.408" aria-label="video time scrubber 0:00 / 45:33" aria-valuetext="elapsed time: 0:00">
  * Or:
    <input type="button" pseudo="-webkit-media-controls-play-button" aria-label="play" class="pause" style="">
	<div aria-label="elapsed time: 0:00" pseudo="-webkit-media-controls-current-time-display" style="">0:00</div>
	(though the time seems to be stuck at "0:00")
  * Actually this has all the data (updated in real time):	
	<div class="vjs-control-bar" dir="ltr">
	  <div class="vjs-progress-control vjs-control">
	    <div tabindex="0" class="vjs-progress-holder vjs-slider vjs-slider-horizontal" role="slider" aria-valuenow="NaN" aria-valuemin="0" aria-valuemax="100" aria-label="Progress Bar" aria-valuetext="04:40 of 45:33">
		[...]
		  <div class="vjs-time-tooltip" aria-hidden="true" style="right: -23.0156px;">14:45</div>
		  <div class="vjs-time-tooltip" aria-hidden="true">04:38</div>
  * For Youtube can use:
    <div class="ytp-time-display notranslate" style="">
	  <span class="ytp-time-current">0:22</span>
	  <span class="ytp-time-separator"> / </span>
	  <span class="ytp-time-duration">2:00:21</span>
  * This might be useless, given Chrome now has:
    - https://support.google.com/chrome/answer/9692215?hl=en
