- Create a static response to chrome.tabs.query() to display some repeatabole set
  of tiles when staging the TabMania popup for release screenshots

- Add devTools function to retrieve a specific tab and its tile and dump them to console

- BUG: after suspending and searching "suspended", some tiles lost their dropdown menu
  * Probably some race condition discarding AsyncQueue before it finished rendering the menu

- Remove all injection code in preparation for release (again)

- Disable Base._assert() for production code

- Point users directly to https://github.com/marcodb26/TabMania#readme for documentation


DONE 1.1

- Add back this._getTabMetaTags() to TabTileViewer::update()
  * And add back host permission "*://*/*" to allow the code injection to run properly

- Moved release process to README-DEV.md

- BUG: need to discard settings events if they arrive before the TabsTabViewer chrome
  query has completed, while _normTabs is still uninitialized

- Learned chrome.extension.getBackgroundPage can't be used in the injected content scripts

- Updated Bootstrap to v.5.0.0-beta2

- BUG: Shortcut05 can't be invoked

- Added Base._log.bg() and Base._err.bg() to direct popup log/error messages to the console
  of the background page

- Track changes to localStore.isPopupDocked() (use event listener) in all opened
  popup windows to close automatically when the docked state changes
  * We should not have more than one undocked popup, but we could have more than
    one docked popup

- Removed fixed "width: 400px" from initialization to support the undocked case
  * We force the width and height of <body> in popupDocker only when the popup is docked
  * This fixed an issue with double scroll bars vertically
  * We still have an issue with double scroll bars horizontally (when very small width)

- Fixed behavior of this._errorMustSubclass(), the changes made to help uglifyjs
  felt suspicious

- Review code to verify there are no other silly this._err() in there (like those attached
  to user input validation, that didn't make sense)

- Include bookmarks in search results, besides open tabs
  * https://developer.chrome.com/docs/extensions/reference/bookmarks/#method-search
  * Add option to include or not bookmarks in search results
    - Auto-updates search results if changed while a search is in progress
  * Manage pressing "Enter" when a bookmark is first in _currentSearchResults
    - Can we unify the behavior of "Enter" and "tile click"?
	  * They're currently in two different classes...
  * Use tile "close" button to delete a bookmark
  * Decide what happens when you click a bookmark
    - What happens if you click a bookmark that's alreay opened?
	  * Now it will try to recycle the existing tab instead of opening a new one
  * Discard a bookmark if it's also loaded
    - Do we care to do this, is it ok if it shows up twice?
	- NO let's show it twice
  * Make sure bookmark search works correctly with search modifiers
    - Avoid it if the "!" modifier is added
	- For "^" we filter initial chrome.bookmarks.search() results for beginning of
	    title or URL or custom group badge
  * Update search results when bookmarks change
  * Define Extended ID of bookmark as "BM[parentID].[bmID]"
  * Replace the "bookmark" badge in bookmark tiles with some other visual clue
	- We should not show a badge because one can't search the keyword "bookmark"
	  * It would be crazy to show just a flat list of all bookmarks
  * Limit search results to 500 bookmarks to avoid slowing down search too much
    - Otherwise single-letter searches can take forever for heavy bookmark users

- Recognize CTRL+V in the keydown handler, and open the searchbox just in time to capture
  the pasted text
  * If the clipboard doesn't have text, the searchbox will close again

- Show bookmark folder path when opening bookmark menu

- Add option "Go to folder" to open the folder of the bookmark in Chrome's bookmark manager
  * Just set URL to "chrome://bookmarks/?id=686", with the ID of the parent folder
    - This didn't seem to require a trip to the background page to launch...

- BUG: we should not keep bookmark folders in search results, they don't have "url":
  * TabsTabViewer.js:593 [popup-tabs-home] TabsTabViewer::_renderTabsFlatInner(): iterating through tabs, at tabId 812 TypeError: Cannot read property 'startsWith' of undefined
    at Object._cleanupUrl (TileViewer.js:299)
    at Object.update (TileViewer.js:328)
    at Object._init (TileViewer.js:29)
    at Object.createAs (utils.js:167)
    at Object.create (utils.js:121)
    at Object._renderTile (TabsTabViewer.js:623)
    at utils.js:1120
    at Array.forEach (<anonymous>)
    at Object._renderTabsFlatInner (TabsTabViewer.js:590)
    at Object._searchRenderTabsInner_Merged (TabsTabViewer.js:830)

- Center the "Settings" bstab now that undocked popups can have their width expanded

- Mitigated ugly slowness when rendering large number of tiles my forcing min-height to 3em
  * Still not great, and besides 3em is not the right size of the tile when it's populated...

- Added AsyncQueue class and worked on improving rendering performance when many
  tiles need to be rendered

- Added support for searching among the recently closed tab
  * Controlled by a settings option
  * Use the search badge "closed" to list them
  * Tiles of recently closed tabs don't have any dropdown and don't have a "close" button,
    because the only action you can take on them is to restore them
	- When restored, a tab disappears from the recently closed list
  * Chrome only returns a maximum of 25 tabs and windows, so don't expect a lot of history
    - Most of the 25 could be taken by windows to be restored from the last reboot, and
	  unfortunately due to a bug with chrome.sessions.restore() we must suppress them
	  (and anyway they would be duplicates of open tabs). Things get better a few hours
	  after the reboot, when normal windows and tabs take over the recently closed tabs
  * Incognito tabs are not saved in "Recently closed" when closed

- AsyncQueue: add high priority and low priority queues

- Activate search results count badge immediately (empty?) when the initial search starts,
  otherwise we have no visual cue that the search is in progress
  * The current blinking cue shows up only after the first search, after further
    edits to the search string

- Added favicon to undocked popup
  * Without it, the tile of the TabMania popup in TabMania was showing up without an icon
    (while for some reason the tile in Windows showed the icon anyway)

- NormalizedTabs::normalizeTab() needs a class-instance independent version of "this._err()"
  * Defined tmUtils.err() for that purpose

- Promoted deepClone() and isEqual() to tmUtils, and added basic support for Arrays
  * Before they could only be used inside PersistentDict

- Now reusing tiles instead of just recreating them at every refresh
  * Not really a full-fledged cache of tiles, but close enough...

- Cleaned up NormalizedTabs.normalizeTab() to fully support tabs, rctabs, bmnodes

- Added prefix to rctab and bmnode IDs to avoid collisions with the numeric space of standard tab IDs.

- Added "state" describing all the rendering needs of a tile, to simplify comparing during update()
  to confirm there are or not real updates to make

- Cleaned up difference between rendering/updating tile body, and rendering/updating tile menu
  * They also get scheduled separately, and in different queues (tile body uses high/normal priorities,
    tile menu uses low priority)

- Make sure tile update() doesn't get fooled if a previous update() didn't complete because it scheduled
  the update, but then the AsyncQueue got discarded before it could take the action

- Cleaned up tab and bookmark menus update() function
  * They were not used before, but now that we reuse tiles, these update() function
    are a must have

- Re-render bookmark path if bookmark moves or its ancestors move

- BUG: when focusing a new window and selecting a different tab with the same click,
  you get both a "window-change" event and an "activated" event. Both add the previously
  active tab to _backTabs, but only one should. Very minor, we need to remove duplicates
  for other reasons anyway, but better to keep things clean.

- BUG: the Font Awesome 5.15.2 javascript slows down tremendously the rendering of TabMania
  when there are many tiles (testing with 700 tiles)... 3/4 of the total time was Font
  Awesome with its event listeners... we don't even diretly call a single FA API!!!
  * See "docs/21.03.03 - Font Awesome 5.15.2 performance issue" for details
  * This would not have been an issue in production, since we don't package Font Awesome
    files in production
  * Since we're not using it, why letting it be in the way

- Removed distinction between _searchRenderTabsInner_Merged() and _searchRenderTabsInner_Separate(),
  the results are always merged, if you want them separated the right way is to allow users
  to group results by source type (tabs, rcTabs, bmNodes, hItems)

- When switching from normal to search, we should take the scrollbar back to the top
  * Same probably when switching from search to search (change input)...

- When switching from search to normal, we should put the scrollbar back where it was
  before the search started

- Add support for history search
  * https://developer.chrome.com/docs/extensions/reference/history
  * Similar to bookmarks, with the advantage of offering a max-limit in the search API
  * This should probably be disabled by default

- Moved "recently closed tabs" (chrome.sessions) functions and events to the HistoryFinder class

- Initial support for context menus
  * Move current page to least tabbed window
  * Open link in least tabbed window
  * With selected text
    - Use launch/search shortcut
	- Use any custom shortcuts with search enabled

- Save size and position of undocked popup

- Make "undocked" the new default for the popup

- BUG: ".form-floating" doesn't seem to work
  * Needed to add a non-empty placeholder at all times

- Add title/name to shortcut keys, and use it in context menu

- BUG: need to consider multiple matches for chromeUtils.getLeastTabbedWindowId()

- Blink popup badge if a triggered action has no effect (e.g. "move to least tabbed window"
  but the tab is already in the least tabbed window)

- Listen to shortcut keys events and update shortcut keys context menus accordingly

- BUG: "move to least tabbed" context menu can't find the tab...

- Removed "Toggle play" menu item
  * Added temporarily to play around with it

- BUG: tiles dropdown menu stays open when clicking on a menu item
  * It might go away because you hover somewhere else, but when you hover back
    it's still open

- Add "move tab to least tabbed window" action to the tile dropdown menu

- Change the shortcut text "unset" to lighter gray, to show it's not set

- Link (click) shortcut text badges to extension shortcut config?

- Cleaned up debugging commands for Chrome dev tools console

- Changed "Discard from memory" menu item to "Suspend"
  * Also changed the search badge from "discarded" to "suspended"

- Remove "pin" menu for bookmarks if we don't implement it in this release

- Remove "Advanced mode" options

- BUG: every time the popup opens
  * popup.html:1 Error in event handler: TypeError: Cannot use 'in' operator to search for '1712' in null
    at Object._tabUpdatedCb (chrome-extension://flhpmmboiepkmkippdhjllnejfolajdb/popup/TabsTabViewer.js:399:14)
  * That's the tab ID of the popup

- Find a way to refresh shortcut text (no event for that)
  * Initially let's just register for Settings bsTab activation and shortcuts
    collapsible container expansion to let them trigger a rebuild of those
	shortcut texts
	- At least the user can do a Settings -> Home -> Settings to see the update,
	  instead of a close -> open popup...

- Using Chrome favicon cache for standard tabs too, as sometimes they're missing
  * Making sure that when a group has to pick a favIcon from one if its members,
    members with a real favIcon are prioitized over members pointing to the cache

- Added extended ID for browsing history items

- BUG: NormalizedTabs.formatExtendedId() uses tab.id for reTabs/BmNodes/hItems instead
  of using the available non-prefixed version (tab.sessionId/tab.bookmarkId/tab.historyId)


PUNTED TO NEXT RELEASE

- BUG: search a single letter ("a"), get 1,100 results, then scroll to the bottom
  * Focus on a window and change active tab
    - The search count badge blinks, then stops blinking, everything is visible
  * Repeat the same but this time close a tab
    - The search count badge blinks, but when it stops, all tiles at the bottom
	  become whilte, and remain white for a while before getting re-rendered
	  * What's the difference between changing active tab and closing a tab???

- BUG: while testing production, "Open in least tabbed window" chose a window with
  more tabs than the one where the parent tab was
  * Need to check what happens if calling "Open in least tabbed window" while on
    the least tab window (with a lot less tabs than the next tabbed window)
  * Also, the bug happened when clicking on a link for a tab that had just been
    moved to the least tabbed window

- BUG: the chrome.history.search API is tricky... if I search for "Los a" it finds
  history of visits to the "Los Angeles Public Library", but if I search for "Los an"
  those results disappear
  * We've seen similar problems with "Go" generating less results than "Goo"
    - While both should capture "Google", and definitely a shorter query should
	  generate more results, not less

- To improve on the update of custom shortcuts text, we could trigger an update to the
  custom shortcuts text badge every time the user focuses on the TabMania popup (for
  undocked, need to find the equivalent for docked), since in order to change the shortcuts
  the user needs to go to the extension page
  * To make it less frequent, we could monitor that the previous tab in focus before the
    popup was the extensions/shortcuts tab
	- But the user could have closed it, or could have navigated through other tabs,
	  or could have used the extensions/shortcuts tab to load other stuff
  * "When the popup gets focused" seems to be the only reliable way to trigger the check
    - Event initiated from background.js, since background.js knows

- Add back this._getTabMetaTags() to TabTileViewer::_renderBody()
  * And add back host permission "*://*/*" to allow the code injection to run properly

- BUG: Pineed custom groups don't show the color on their left border when they're empty

- For the tiles of open tabs representing bookmarks (e.g. chrome://bookmarks/?id=686),
  try to query the name of the bookmark id (e.g. id=686)
  * It should always be a folder
  * List the folder name in the title?

- Option to find URLs open in multiple tabs (deduplicate)

- If you open a dropdown menu and hover away from the tile (without clicking the menu),
  make sure the menu gets closed automatically

- Support "undo" for deleted bookmarks
  * Can we also "undo" deleted browsing history items?

- Add a global shortcut to bring the undocked TabMania popup to the front or open
  it if it's closed
  * This is already possible with the standard "invoke popup" shortcut, but that shortcut
    is restricted to work only in "Chrome" scope, and we want to have an alternative for
	global scope when the popup is undocked

- In search, consider multiple words to be multiple keywords separated by "or"
  * Right now multiple words are still pat of a single string
  * Is that compatible with using the "+" as launch/search?

- Add shortcut title to dropdown menu of tabs
  * We use the "shortcut title" in context menus, should we also use it in the tile
    dropdown (maybe as a subtitle?) to tell the user what that "SC2" badge means?

- When clicking on the "shortcut text" in the shortcut settings, we open the Chrome page for
  extension shortcuts settings in a new window with every click
  * We should first try to find if the page is already opened instead, and reuse it
  * This might disrupt the docked popup (we didn't want anything to happen to the
    window where the popup is opened, that's why we chose the "always new window"
	behavior)
    - But nowadays the undocked is the better version, and it doesn't suffer this problem
	- Maybe we can at least choose the better behavior only when undocked, and revert
	  to "always open new in new window, never reuse" when docked

- TabsTabViewer needs a more precise caching mechanism for tile viewers
  * Right now we discard any tile that's not used in the current rendering iteration
  * This means that if you search and find 1,000 bookmarks, then get out of search, the
    tiles of those bookmarks will be discarded, and not available the next time you
	search again
  * A proper cache would let those bookmark tiles expire after a certain amount of time
    instead of dropping them immediately

- Try again to prioritize tile rendering based on being visible on the screen

- Support pinning bookmarks
  * If a pinned bookmark is open, show only the open tab, not the bookmark
  * We should force an opened tab to get automatically pinned, if its bookmark is pinned? Or just query for the match every time?
  * Do we want an option to let pinned bookmark land automatically in the "bookmark bar"?
    - But don't use the bookmark bar as storage to know which tabs are pinned...
	- What happens when a tab gets unpinned? Remove it from hte bookmark bar or leave it alone?

- Group tabs with same title and same URL to show as a single collapsed tile with a count
  * Support expansion (persisted)
  * Include corresponding bookmarks in group (match only by URL for bookmarks, since they might have a title out of sync)
  * This should be done for all modes (standard and search), maybe in different stages, because otherwise search can never use the flat rendering

- Menu action to re-sync bookmark title if a corresponding tab is open and its title doesn’t match(?)

- BUG: when you click a menu or a close button, the searchbox loses focus and doesn't
  recover it even after the menu/close click is over
  * Probably related:
	- BUG: in search mode, when the searchbox is not in focus, CTRL+A should select the full
	  text of the searchbox, but instead it selects everything on the entire page

- The bstabs show an ugly URL at the bottom of the undocked window, we should
  get rid of it

- Add tab count badge to "Home" bstab
  * Maybe only when it's undocked? It's redundant when docked

- Add logic to let "www.google.com" be recognized as a valid URL, even though new URL()
  won't consider it valid
  * Make it behave like the browser's omnibar...

- BUG: the ellipsis of .text-truncate are not vertically align with the title of a tile
  now that the title of the tile uses Bootstrap's .align-middle (vertical-align: middle;)
  * They were align to the baseline of the text before the .align-middle change...
  * .text-truncate is in the parent element, but setting .align-middle there too has
    no effect at all

- BUG: now that we have a way to persist the popup beyond the life of a tab/window,
  we're starting to see race conditions we did not see before:
  * [2] ChomeUtils::inject(695): unknown error: No tab with id: 695.
  * It looks like when we close a tab, we might still have it for a while and try to
    inject scripts into it
	- As a minimum we should suppress this error, but better trying to figure out
	  why we have this race, I thought we injected only on full refresh?
	  * Probably we inject also on single-tab update, but why would we get an
	    update for a tab that's been closed?
	  * And why was this not happening with docked popup when closing a tab from
	    within the popup?
  * At the end of the 1.1 development, unable to reproduce this issue

- Limit maximum number of tabs in a window
  * To be used with the "least tabbed window" logic to decide to open a new tab in a
    new window
  * Should we dynamically apply it to tabs created via Chrome too?
    - It might not be too bad to see a tab show up in a window, then move in another,
	  as long as we follow it (?)
	  * But what about the "open in a new tab" cases, the user is not following immediately,
	    and when she tries to go there, they're gone from that window

- Create subsystem to monitor which tiles are currently visible
  * This will be useful later to perform more complex computations only on visible tabs

- If a tile is inside a group accordion, and the accordion is closed, put the tile in
  the low priority queue for rendering

- Auto-select-all in searchbox when user clicks the mouse there to edit

- Add in settings total count of tabs and bookmarks
  * Don’t exclude folders when counting bookmarks, too expensive
  * Use pulseBadge class while recalculating values
  * Calculate values only when user on settings tab (otherwise just mark them as dirty and wait for settings tab to be in focus before you recalculate)

- Sorting tiles, add secondary criteria
  * If two tabs have the same title, sort by url
  * Same URL, sort by index in window (to match their appearance on chrome)

- Instead of setting an arbitrary "3em" for the min-height of tiles, we should add some
  code to measure the height of a populated tile right after startup, then use that exact
  value for the empty tile body from that point on
  * Tiles might measure different amounts for different users, but once a session has
    started, the tabs should not change size for the duration of that session

- Make bstabs disappear when they get too small and they would want to go on two lines
  * Can't use ".d-none .d-sm-block" as described in https://getbootstrap.com/docs/5.0/utilities/display/
    - It removes them when the window is still way too large

- Remove vertical scrollbar and replace it with buttons at the top and bottom of the
  popup view
  * Even if without full scrollbar, users should be able to scroll using modern
    wheels / gestures
	- Doesn't work with "overflow: hidden;", but it should work with this:
	  https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
	  e.g.:
		::-webkit-scrollbar {
			width: 0px;
		}
  * Optional controlled by Settings?
  * Only for undocked popup?
  * Needed to make the undocked popup look slicker when very narrow and long
    - The vertical scrollbar takes up precious real estate in that case, and forces
	  the popup to be slightly wider to get the same amount of visible text

- Improve date visualization in TileHistoryMenuViewer._updateTitleMenuItem()
  * Use moments.js or something equivalent?

- Add spinner to unrendered tile body to let users know it's coming...

- Create a small always-on-top notification with the list of pinned tabs (icons only)?
  * Similar to Windows tray

- Expand/collapse all groups (popup menu item)

- Group/ungroup all groups (popup menu items)
  * In search, allow also to "group by source" (tabs, rcTabs, bmNodes, hItems)

- Suspend tiles refresh when displaying menu items
  * Especially at brwser startup time, there are lots of refreshes, and they cause
    the menu dropdown and the "x" clse button to disappear
  * If you're unlucky, you press the "x" button right after it's gone and you end
    up taking the tab to the fore instead
  * Not sure this is a good idea, what if one stays with the mouse on a tile forever?
    No refreshes ever again?

- Add a star to a tile if it's bookmarked
  * We must do this asynchronously, we can't wait for all these bookmark searches
    to go through after every tab query
    - Do it directly in the tile?
	  * It could do it only when it becomes visible in the scrolling

- Add badge "recent" to the last 10-15 visited tabs
  * Independent of the "active" badge
  * We thought we should use the TabsManager back/fwd history, but it would make more sense
    to actually measure how much time the user spends with a window in focus and a tab active,
	across every tab/window transition, then get the most recent from there

- BUG: creating a custom group with just name and no other settings leads to no group
  displayed
  * Sequence
    - First create a group A with some properties
	- Then create a group B with only a name
	- Now delete the group A
	- Close the popup and reopen it, group B is gone, but its name can't be reassigned
	  to another group
	- Eventually group B shows up again (weird)
  * Towards the end of 1.1, can't reproduce anymore

- BUG: chrome.tabs.update(tabId, { url: url }) loads a new "url" but sometimes replaces the
  existing URL instead of adding it to the tab navigation history
  * Apparently Firefox has a "loadReplace" parameter exactly to control this behavior
    (replace or add to history), but Chrome doesn't support that option:
	https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/update
	https://developer.chrome.com/docs/extensions/reference/tabs/#method-update
  * Noting this peculiar behavior here, but there's nothing I can do about it...
    * Note also the behavior is not consistent, not clear when it replaces and
	  when it adds to navigation
  * Use a search shortcut to try it out

- Do we need a different icon for the "launch/search" behavior of the "Open new
  tab" button?

- Make sure to filter out of the tab list the tab about the undocked popup(!)
  * Also filter it out of the back/fwd history
  * Should we leave in the count of open tabs? Probably yes (besides it's probably
    too complicated to filter there)

- Fix double scroll bars when undocked popup has too little width (horizontally only)

- Change the icon of the extension popup to red in dev mode when there's a this._err()
  or a console.error()
  * And send all errors also to the background page! (otherwise they get lost when the
    popup gets closed)

- Expanded accordions have a bothering blue tint
  * Remove the tint, or, for custom groups, align it to the color of the custom group

- Shortcuts1-5 with option to select incognito tabs
  * If not selected, ignore incognito tabs

- Show a badge/icon if a tab is in full screen
  * https://stackoverflow.com/questions/4296005/determining-if-chrome-is-in-fullscreen-mode-for-extension-development
  * And set/remove full screen?
    - https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
	- Probably hard to detect in general which elements need to call the API

- Find a way to keep the popup open when it triggers the creation or removal of a tab in
  the same window
  * It's very annoying to click "x" on a tile to remove a tab, and have the entire popup
    disappear
	- Maybe it disappears only if the active tab is being removed?
  * As of v.1.1, this can be mitigated by undocking the popup

- Find a way to support autocomplete for the search input (a.k.a. "remember recent searches")
  * https://stackoverflow.com/questions/15462991/trigger-autocomplete-without-submitting-a-form
    - The HTML5 <input autocomplete="On"> only works if you
	  * Give a fixed ID to the input field (we might need changes to make that happen)
	  * Force a real form submission
  * Alternatively, find a library to do something custom with it...

- BUG: if a group has a long name and it's pinned, it's thumbtack is slighty off
  to the right compared to the other pinned groups/tiles around it

- Display <meta> tag information in dropdown, under title
  * Only "description"? Or also "image" when available?

- Show current tab in current window at the top of the tabs list?

- Sort/group tabs by other means (by window, etc.)

- Reorganize TabsTabViewer to leverage a separate "TabsSet" object to manage the querying
  and maintenance of tabs subsets (instead of spreading that logic within the class code
  * One such object for the standard view, one for the search view, in future possibly
    one separate object for the incognito view (which needs to behave like standard view,
	but on a different subset of tabs)

- For bookmarks in search results, do we care to allow users to choose to reopen existing
  vs. always open new tab when they click on a bookmark?
  * We offer that option for custom shortcuts...
  * To implement this option, we'd need to offer back a menu button in bookmark tiles,
    with the two options

- Track and visualize time spent on each active tab (while the window is in foreground)

- Menu item to move all tabs in a custom group to the same window

- Time slice settings (fixed or relative times), just do fixed times for now

- BUG: what's wrong with the "CTRL+SHIFT+5" shortcut? If you set this key combo on a shortcut,
  the shortcut becomes dead and doesn't arrive to the background page anymore
  * Then you change it, the shortcut is still dead until you reload the extension

- Display details about video
  * For Zoom video playback, you can use:
	"-webkit-media-controls-timeline"
	<input type="range" step="any" pseudo="-webkit-media-controls-timeline" max="2733.408" aria-label="video time scrubber 0:00 / 45:33" aria-valuetext="elapsed time: 0:00">
  * Or:
    <input type="button" pseudo="-webkit-media-controls-play-button" aria-label="play" class="pause" style="">
	<div aria-label="elapsed time: 0:00" pseudo="-webkit-media-controls-current-time-display" style="">0:00</div>
	(though the time seems to be stuck at "0:00")

  * Actually this has all the data (updated in real time):	
	<div class="vjs-control-bar" dir="ltr">
	  <div class="vjs-progress-control vjs-control">
	    <div tabindex="0" class="vjs-progress-holder vjs-slider vjs-slider-horizontal" role="slider" aria-valuenow="NaN" aria-valuemin="0" aria-valuemax="100" aria-label="Progress Bar" aria-valuetext="04:40 of 45:33">
		[...]
		  <div class="vjs-time-tooltip" aria-hidden="true" style="right: -23.0156px;">14:45</div>
		  <div class="vjs-time-tooltip" aria-hidden="true">04:38</div>

  * For Youtube can use:
    <div class="ytp-time-display notranslate" style="">
	  <span class="ytp-time-current">0:22</span>
	  <span class="ytp-time-separator"> / </span>
	  <span class="ytp-time-duration">2:00:21</span>
  * This might be useless, given Chrome now has:
    - https://support.google.com/chrome/answer/9692215?hl=en

- Remove from SettingsStore.js the stuff that doesn't belong there
  * See comment at top of file. Dose background.js really need the
    "NormalizedTabs" class or the "ShortcutManager" class?
	- Yes to both (see TabsManager)

- Can we re-use tiles as we do full re-renders?
  * Right now we just discard all the existing tiles and create new ones
  * Ideally we should reuse tiles for the same tabID, to also minimize the
    chances of body re-rendering (this implies creating a function during
	body updates that validates whether or not the tab info has changed at all)

- BUG: when closing and reopening popup, the scroll goes back to the top, we should
  remember the scrolling position when the popup was closed
  * Or should "go back to top" be expected to be the right behavior?

- Create new window event to attach more bstabs later (the event fires when the basic skeleton is
  ready to accept bstabs insertion), so we can cut the “global” tab from first release but keep
  its insertion functional without touching popuptabs
  * Actually maybe best to just add a "register" to push all the plugins that want to be attached,
    so they can push in the order in which they want to be attached

- Use chrome.tabs.captureVisibleTab() to capture a screenshot of the tab
  * Works only when the tab is active

- Implement "recent" tabs
  * Start with TabsManager::_notifyPopup()

- Keyboard navigation through tiles

- Boot-up performance: can we make the tiles appear faster?
  * Are the 4 shortcuts in 4 different chrome.storage.sync variables causing a delay?
  * Should we decouple the rendering that depends on settings from the rendering that
    doesn't to speed up settings-independent rendering in parallel with loading settings?
	- It looks like "window.onLoad" takes longer than loading settings (and they happen
	  in parallel), so we can't get any value from this, since we must wait for
	  "window.onLoad"
  * Render tile menus only when users click on it, or when they hover long enough on
    the tile to show the menu dropdown toggle?
	- https://davidwalsh.name/css-animation-callback
	- To trigger creation of a menu when the dropdown toggle shows up (delayed by CSS rules),
      instead of creating the menu immediately when the tile is being rendered
	- Probably not as useful now that we have async rendering of tiles body, but
	  it might still help by reducing the cost of these async tasks (and therefore
	  freeing up cycles to do something else that currently would be waiting)
  * This is now mitigated by the availability of an undocked popup

- Undocked popup always on top of other windows
  * Currently Chrome doesn't have such an API

- Implement https://developer.chrome.com/docs/extensions/reference/runtime/#event-onUpdateAvailable
  to force an update of the extension for users that never close their browser
  * Maybe offer the option to update in the "Settings" menu?

- Contact this guy to review my extension
  * https://www.computerworld.com/article/3535189/chrome-tab-switcher.html

- Find a notification to update in real-time when the user changes isAllowedIncognitoAccess()
  * This notification doesn't seem to exist today
  * Should we poll?
  * Probably not really needed, when the user makes the incognito change, the popup gets automatically
    closed by Chrome (even if undocked!)

- Find a better way to implement chromeUtils.getExtensionId()

- When a tab has a load error (which prevents injection of inject-getMeta.js)
  display a special error icon to identify the tab failed to load (e.g. because
  of network down) (search "network down" in the code to find the place where
  this check is made)

- Implement TileMenuViewer._updateShortcutMenuItems()
  * Or do we really care, given that most of the times we need to rebuild the
    entire set of tabs from scratch

- BUG: between the scrollbar on the right and the extension border you can see a bit of background,
  you shouldn't see it
  * See for example the screenshot used to publish the extension
  * Tried to set the <body> color to black, and that tiny strip next to the scrollbar
    is still transparent
	- It seems to be an issue with the scrollbar itself, not sure how to fix it, maybe
	  it will go away when we replace/remove the scrollbar

- BUG: When opening the undocked popup, the tiles rendering always happens twice: first
  because we opened it and queried for all tabs, second because we received a notification
  that our own popup tab went from status "loading" to status "loaded".
  * It's annoying to have to render twice, and slows down the startup of the undocked
    popup, but unless we find a good way to avoid full re-render when this event arrives,
	we need the event
  * We tried to suppress all events from our own popup, we ended up with a tile for the
    popup that was showing "loading" until another unrelated event cleared it

- Find a good way to manage console.log() in injected files (leveraging lib/prod.js)
  * Then add lib/prod.js to the "npm run inject" script

- Manage incognito tabs (same view, different BS-tab, hide, etc)

- Add action menu to containers

- BUG: the popup icon badge shows the wrong count when entering search mode, it
  seems to be getting updated to the number of tabs in the search results...

- "Candidate tabs" behavior should apply also for hostnames and URLs not in "search mode"
  ("useClipboard")

- Add support for wildcards in "matchList" of custom groups

- Fix the domElem.addEventListener(event, fn, true), sometimes we say "true", sometimes
  we say "false", can we do it more accurately than random?

- BUG: sometimes some websites blink the title continouosly between two
  different titles, e.g.:
  https://www.snowflake.com/data-warehousing-difference-sql-nosql/
  switching between normal title and "(1) new message" because of the
  "bear" with the chat with a pending advertisement
  - How do we throttle that to avoid too much blinking of the bsTab and
    too much re-rendering of the popup?

- BUG: console.log() and console.info() are the same thing in Chrome,
  so our functions this._log() and this._log.info() are the same thing...
  maybe we should use console.debug() as this._log()?
  * With or without renaming this._log()?

- Organize groups by host name inside top level groups (second level)
  * With group/ungroup option for each top level group

- Work with tab groups, introduced by Chrome in 2020
  * https://dev.to/otomer/google-chrome-s-new-update-finally-allows-you-to-organize-tabs-easily-this-is-how-you-can-use-it-3f99
  * Note that tab groups only work within a window
  * Unclear how to query for group properties (name and color)
	- Still work in progress, see here for updates: https://bugs.chromium.org/p/chromium/issues/detail?id=1106846
	- There should soon be a chrome.tabGroups API
	- Actually it's here: https://developer.chrome.com/docs/extensions/reference/tabGroups/
	  * But only available to the dev channel as of 21.01.24

- Stop querying chrome.tabs.query in the popup, and do the querying only in the backgrond
  * The background should manage the "normalization" step too, and just notify the
    popup with the pre-normalized tabs list
	- This should save some time at popup opening time, since the popup won't have
	  to manage the query and normalization
    - Even if it doesn't save visible time, it will still reduce the amount of processing
	  caused by the popups, since eahc popup needs to query/normalize independently
	  * The only side effect is that the background might have to do this at all
	    times, even when no popup is open, but it already has to do that, in order
		to manage correctly the custom shortcuts


ENVIRONMENT

- Google developer console: https://chrome.google.com/webstore/devconsole

- Upgraded GIT to v.2.30.1.windows.1
  * To upgrade:
    > git update-git-for-windows
  * Repo at: https://github.com/marcodb26/TabMania.git
  * To clone
    > git clone https://github.com/marcodb26/TabMania.git
  * To see commits history
	- https://github.com/marcodb26/TabMania/commits

- Upgraded NPM to v.7.5.4
  * To upgrade:
    - Run PowerShell as Administrator
      > Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
      > npm install -g npm-windows-upgrade
      > npm-windows-upgrade
  * Created project with "npm init"
    - Edited package.json to make project private
	  * Add line after "description":
		> "private": true,

- Changed shell for NPM
  * Original: "C:\\WINDOWS\\system32\\cmd.exe"
  * New: "C:\\Program Files\\Git\\git-bash.exe"
  > npm config set shell "C:\\Program Files\\Git\\git-bash.exe"
  > npm config set script-shell "C:\\Program Files\\Git\\git-bash.exe"
  * Use "npm config list" to check
  * UPDATE: this makes "npx" fail on Windows...

- Installed Bootstrap
  > npm install bootstrap@5.0.0-beta1
  * Make sure to move node_modules\bootstrap\dist\css\bootstrap.min.css and
    node_modules\bootstrap\dist\js\bootstrap.bundle.min.js to src/popup when
	upgrading Bootstrap again

- Installed uglify-js v.3.12.8
  > npm install uglify-js --save-dev

- Installed csso-cli v.3.0.0 (https://www.npmjs.com/package/csso-cli)
  > npm install csso-cli --save-dev
  * Really liked the documentation of cssnano (https://cssnano.co/docs/getting-started), but
    decided to go with csso because it seemed to be more "independent" of other modules

- Installed strip-json-comments-cli v.1.0.1
  > npm install strip-json-comments-cli --save-dev
  - It added 49 packages (???)


PREPARING DIST

- Copy /src/manifest.json to /dist/manifest.json

- With /dist/manifest.json
  * Replace all background.scripts with just "background.js"
  * Remove permissions "tabGroups" (until they become available in the stable channel)
  * Rename "default_popup" from "popup/popup.html" to "popup.html"
  * Remove all comments
  * Remove completely the "content_security_policy" line at the bottom
    - We used to need it because we were using Bootstrap online, but not anymore
	- We keep it for dev in case we want to experiment with new Font Awesome icons,
	  but we don't use remote icons in productions

- Copy /src/popup/popup.html to /dist/popup.html

- Copy /src/bootstrap.min.css to /dist/bootstrap.min.css
  * Why not copy from /node_modules/bootstrap/dist/css? Because the process is still
    very manual, and if we've tested from /src, better to include from /src, in case
	we forgot to update these files in /src when we (thought we) upgraded Bootstrap

- Copy /src/bootstrap.bundle.min.js to /dist/bootstrap.bundle.min.js
  * Why not copy from /node_modules/bootstrap/dist/js? Because the process is still
    very manual, and if we've tested from /src, better to include from /src, in case
	we forgot to update these files in /src when we (thought we) upgraded Bootstrap

- Remove sourcemap comment from the bottom of /dist/bootstrap.min.css and /dist/bootstrap.bundle.min.js

- With /dist/popup.html
  * Replace all local <script> tags (including all "inject" tags) with just "popup.js"
  * Remove Font Awesome stuff
	- <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" rel="stylesheet">
	- <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/js/all.min.js"></script>
  * Remove all comments

- Copy /src/images to /dist/images

- Create /dist/content-gen
  * Or not, wait until we actually need it...

- Run "npm run uglifyBg" to minify dist/background.js
  * "uglifyBg" should include the option "--compress", but that option triggers strange
    warnings (it reshuffles uses of variables and starts finding "Dropping duplicated definition
	of variable [xyz]"), plus it discards the unused "tmStats()" (which we'd like not to discard)
	- All of this for a gain of 2KB (from 52KB to 50KB, without "--mangle"), not worth it
	- We also tried --mangle, without "--compress" it takes the code down from 52KB to 45KB,
	  but again you lose "tmStats()"
	- We'll clean this up later and possibly add back --compress and --mangle
	  * And also add back --source-map once we understand if we really need it

- Run "npm run uglifyPopup" to minify dist/popup.js
  * Try to use "--compress" temporarily just to see if it comes up with any useful warnings...
  * Without --compress the code amounts to 113KB, with it (but no --mangle) it's 109KB
    - No difference at all...
	- With --mangle --compress we're down to 95KB (but again, for now let's build without these options)

- Run "npm run css" to minify dist/popup.css

- Run "npm run uglifyInject" to minify dist/content-gen/inject-getMeta.js
  * Or not, if you have not created /dist/content-gen (see above)

- Bundle /dist in a zip file of form "TabMania vX.Y.zip", where X.Y is the same version as the version
  in the manifest.json file

- Post the new version on the Google developer console at https://chrome.google.com/webstore/devconsole

- Commit /dist to github
  * Then don't touch /dist until the next release cycle

- Tag commit by creating a release in github
  * https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository
  * Cerate a tag as part of the release creation process
    - The tag must have format "vX.Y", where X.Y is the same version as the version in the manifest.json file

- Use "git fetch" to get the new tag to your clone repo

- Edit /src/manifest.json and update "version" to the next expected release version

- Commit this change alone with message "First commit for vX.Y", where X.Y is the same version as the new
  version you've just edited in the manifest.json file